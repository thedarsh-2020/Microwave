
Microwave_Display.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002742  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002742  000027d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800078  00800078  000027ee  2**0
                  ALLOC
  3 .stab         00002814  00000000  00000000  000027f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001459  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000645d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000659d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000670d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008356  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009241  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a3dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 cc 05 	jmp	0xb98	; 0xb98 <__vector_2>
       c:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__vector_3>
      10:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__vector_4>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 2f 0c 	jmp	0x185e	; 0x185e <__vector_6>
      1c:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_7>
      20:	0c 94 6c 0b 	jmp	0x16d8	; 0x16d8 <__vector_8>
      24:	0c 94 24 0b 	jmp	0x1648	; 0x1648 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 02 08 	jmp	0x1004	; 0x1004 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 fc 0b 	jmp	0x17f8	; 0x17f8 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 08 	call	0x103a	; 0x103a <main>
      8a:	0c 94 9f 13 	jmp	0x273e	; 0x273e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 68 13 	jmp	0x26d0	; 0x26d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 84 13 	jmp	0x2708	; 0x2708 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 74 13 	jmp	0x26e8	; 0x26e8 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 90 13 	jmp	0x2720	; 0x2720 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 78 13 	jmp	0x26f0	; 0x26f0 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 94 13 	jmp	0x2728	; 0x2728 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzer_init>:
/*
 * Description :
 * Function responsible for initiate buzzer pin direction and its initial state
 */
void buzzer_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* setup pin direction as output */
	GPIO_setupPinDirection(PORTC_ID, PIN1_ID, PIN_OUTPUT);
     b4e:	82 e0       	ldi	r24, 0x02	; 2
     b50:	61 e0       	ldi	r22, 0x01	; 1
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>

	/* set buzzer initial state as turn it off */
	GPIO_writePin(PORTC_ID, PIN1_ID, LOGIC_LOW);
     b58:	82 e0       	ldi	r24, 0x02	; 2
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <buzzer_on>:
/*
 * Description :
 * Function responsible for turn on buzzer
 */
void buzzer_on(void)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN1_ID, LOGIC_HIGH);
     b70:	82 e0       	ldi	r24, 0x02	; 2
     b72:	61 e0       	ldi	r22, 0x01	; 1
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <buzzer_off>:
/*
 * Description :
 * Function responsible for turn off buzzer
 */
void buzzer_off(void)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN1_ID, LOGIC_LOW);
     b88:	82 e0       	ldi	r24, 0x02	; 2
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <__vector_2>:
/*
 * Description :
 * External Interrupt Handler
 */
ISR(INT1_vect)
{
     b98:	1f 92       	push	r1
     b9a:	0f 92       	push	r0
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	0f 92       	push	r0
     ba0:	11 24       	eor	r1, r1
     ba2:	2f 93       	push	r18
     ba4:	3f 93       	push	r19
     ba6:	4f 93       	push	r20
     ba8:	5f 93       	push	r21
     baa:	6f 93       	push	r22
     bac:	7f 93       	push	r23
     bae:	8f 93       	push	r24
     bb0:	9f 93       	push	r25
     bb2:	af 93       	push	r26
     bb4:	bf 93       	push	r27
     bb6:	ef 93       	push	r30
     bb8:	ff 93       	push	r31
     bba:	df 93       	push	r29
     bbc:	cf 93       	push	r28
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	/* Call the call back function if it init-ate with function address */
	if(g_callBackPtr_INT1 != NULL_PTR)
     bc2:	80 91 7d 00 	lds	r24, 0x007D
     bc6:	90 91 7e 00 	lds	r25, 0x007E
     bca:	00 97       	sbiw	r24, 0x00	; 0
     bcc:	29 f0       	breq	.+10     	; 0xbd8 <__vector_2+0x40>
	{
		(*g_callBackPtr_INT1)();
     bce:	e0 91 7d 00 	lds	r30, 0x007D
     bd2:	f0 91 7e 00 	lds	r31, 0x007E
     bd6:	09 95       	icall
	}
}
     bd8:	cf 91       	pop	r28
     bda:	df 91       	pop	r29
     bdc:	ff 91       	pop	r31
     bde:	ef 91       	pop	r30
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	0f 90       	pop	r0
     bfa:	1f 90       	pop	r1
     bfc:	18 95       	reti

00000bfe <display_init>:
/*
 * Description :
 * Function responsible for init-ializing the display
 */
void display_init(void)
{
     bfe:	df 93       	push	r29
     c00:	cf 93       	push	r28
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(PORTA_ID, PIN0_ID, PIN_OUTPUT);
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	41 e0       	ldi	r20, 0x01	; 1
     c0c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN1_ID, PIN_OUTPUT);
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	61 e0       	ldi	r22, 0x01	; 1
     c14:	41 e0       	ldi	r20, 0x01	; 1
     c16:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN2_ID, PIN_OUTPUT);
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	62 e0       	ldi	r22, 0x02	; 2
     c1e:	41 e0       	ldi	r20, 0x01	; 1
     c20:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTA_ID, PIN3_ID, PIN_OUTPUT);
     c24:	80 e0       	ldi	r24, 0x00	; 0
     c26:	63 e0       	ldi	r22, 0x03	; 3
     c28:	41 e0       	ldi	r20, 0x01	; 1
     c2a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_writePin(PORTA_ID, PIN0_ID, LOGIC_LOW);
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	60 e0       	ldi	r22, 0x00	; 0
     c32:	40 e0       	ldi	r20, 0x00	; 0
     c34:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN1_ID, LOGIC_LOW);
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	40 e0       	ldi	r20, 0x00	; 0
     c3e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN2_ID, LOGIC_LOW);
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	62 e0       	ldi	r22, 0x02	; 2
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
	GPIO_writePin(PORTA_ID, PIN3_ID, LOGIC_LOW);
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	63 e0       	ldi	r22, 0x03	; 3
     c50:	40 e0       	ldi	r20, 0x00	; 0
     c52:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>

	GPIO_setupPinDirection(PORTB_ID, PIN0_ID, PIN_OUTPUT);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	60 e0       	ldi	r22, 0x00	; 0
     c5a:	41 e0       	ldi	r20, 0x01	; 1
     c5c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN1_ID, PIN_OUTPUT);
     c60:	81 e0       	ldi	r24, 0x01	; 1
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	41 e0       	ldi	r20, 0x01	; 1
     c66:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN2_ID, PIN_OUTPUT);
     c6a:	81 e0       	ldi	r24, 0x01	; 1
     c6c:	62 e0       	ldi	r22, 0x02	; 2
     c6e:	41 e0       	ldi	r20, 0x01	; 1
     c70:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID, PIN3_ID, PIN_OUTPUT);
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	63 e0       	ldi	r22, 0x03	; 3
     c78:	41 e0       	ldi	r20, 0x01	; 1
     c7a:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_writePin(PORTB_ID, PIN0_ID, LOGIC_HIGH);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	60 e0       	ldi	r22, 0x00	; 0
     c82:	41 e0       	ldi	r20, 0x01	; 1
     c84:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN1_ID, LOGIC_HIGH);
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	41 e0       	ldi	r20, 0x01	; 1
     c8e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN2_ID, LOGIC_HIGH);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	62 e0       	ldi	r22, 0x02	; 2
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
	GPIO_writePin(PORTB_ID, PIN3_ID, LOGIC_HIGH);
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	63 e0       	ldi	r22, 0x03	; 3
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
}
     ca6:	cf 91       	pop	r28
     ca8:	df 91       	pop	r29
     caa:	08 95       	ret

00000cac <set_digits>:
/*
 * Description :
 * Function responsible for setting display digits
 */
void set_digits(void)
{
     cac:	df 93       	push	r29
     cae:	cf 93       	push	r28
     cb0:	00 d0       	rcall	.+0      	; 0xcb2 <set_digits+0x6>
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
	/* Send IAM_READY byte to Microwave Keypad to ask it to send the digits */
	UART_sendByte(IAM_READY);
     cb6:	84 e6       	ldi	r24, 0x64	; 100
     cb8:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>

	/* waiting to receive  digit location */
	rx_temp = UART_recieveByte();
     cbc:	0e 94 cb 12 	call	0x2596	; 0x2596 <UART_recieveByte>
     cc0:	80 93 80 00 	sts	0x0080, r24

	/* after receiving digit location, waiting to receive digit number */
	switch(rx_temp)
     cc4:	80 91 80 00 	lds	r24, 0x0080
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	3a 83       	std	Y+2, r19	; 0x02
     cce:	29 83       	std	Y+1, r18	; 0x01
     cd0:	89 81       	ldd	r24, Y+1	; 0x01
     cd2:	9a 81       	ldd	r25, Y+2	; 0x02
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	91 05       	cpc	r25, r1
     cd8:	f1 f0       	breq	.+60     	; 0xd16 <set_digits+0x6a>
     cda:	29 81       	ldd	r18, Y+1	; 0x01
     cdc:	3a 81       	ldd	r19, Y+2	; 0x02
     cde:	23 30       	cpi	r18, 0x03	; 3
     ce0:	31 05       	cpc	r19, r1
     ce2:	34 f4       	brge	.+12     	; 0xcf0 <set_digits+0x44>
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	9a 81       	ldd	r25, Y+2	; 0x02
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 05       	cpc	r25, r1
     cec:	61 f0       	breq	.+24     	; 0xd06 <set_digits+0x5a>
     cee:	42 c0       	rjmp	.+132    	; 0xd74 <set_digits+0xc8>
     cf0:	29 81       	ldd	r18, Y+1	; 0x01
     cf2:	3a 81       	ldd	r19, Y+2	; 0x02
     cf4:	23 30       	cpi	r18, 0x03	; 3
     cf6:	31 05       	cpc	r19, r1
     cf8:	d1 f0       	breq	.+52     	; 0xd2e <set_digits+0x82>
     cfa:	89 81       	ldd	r24, Y+1	; 0x01
     cfc:	9a 81       	ldd	r25, Y+2	; 0x02
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	91 05       	cpc	r25, r1
     d02:	29 f1       	breq	.+74     	; 0xd4e <set_digits+0xa2>
     d04:	37 c0       	rjmp	.+110    	; 0xd74 <set_digits+0xc8>
	{
	case 1:
		/* Send FINISH byte to Microwave Keypad to ask it to send the digits */
		UART_sendByte(FINISH);
     d06:	8f e0       	ldi	r24, 0x0F	; 15
     d08:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
		SEC_1 = UART_recieveByte();
     d0c:	0e 94 cb 12 	call	0x2596	; 0x2596 <UART_recieveByte>
     d10:	80 93 79 00 	sts	0x0079, r24
     d14:	2f c0       	rjmp	.+94     	; 0xd74 <set_digits+0xc8>
		break;

	case 2:
		SEC_2 = SEC_1;
     d16:	80 91 79 00 	lds	r24, 0x0079
     d1a:	80 93 7a 00 	sts	0x007A, r24
		UART_sendByte(FINISH);
     d1e:	8f e0       	ldi	r24, 0x0F	; 15
     d20:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
		SEC_1 = UART_recieveByte();
     d24:	0e 94 cb 12 	call	0x2596	; 0x2596 <UART_recieveByte>
     d28:	80 93 79 00 	sts	0x0079, r24
     d2c:	23 c0       	rjmp	.+70     	; 0xd74 <set_digits+0xc8>
		break;

	case 3:
		MIN_1 = SEC_2;
     d2e:	80 91 7a 00 	lds	r24, 0x007A
     d32:	80 93 7b 00 	sts	0x007B, r24
		SEC_2 = SEC_1;
     d36:	80 91 79 00 	lds	r24, 0x0079
     d3a:	80 93 7a 00 	sts	0x007A, r24
		UART_sendByte(FINISH);
     d3e:	8f e0       	ldi	r24, 0x0F	; 15
     d40:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
		SEC_1 = UART_recieveByte();
     d44:	0e 94 cb 12 	call	0x2596	; 0x2596 <UART_recieveByte>
     d48:	80 93 79 00 	sts	0x0079, r24
     d4c:	13 c0       	rjmp	.+38     	; 0xd74 <set_digits+0xc8>
		break;

	case 4:
		MIN_2 = MIN_1;
     d4e:	80 91 7b 00 	lds	r24, 0x007B
     d52:	80 93 7c 00 	sts	0x007C, r24
		MIN_1 = SEC_2;
     d56:	80 91 7a 00 	lds	r24, 0x007A
     d5a:	80 93 7b 00 	sts	0x007B, r24
		SEC_2 = SEC_1;
     d5e:	80 91 79 00 	lds	r24, 0x0079
     d62:	80 93 7a 00 	sts	0x007A, r24
		UART_sendByte(FINISH);
     d66:	8f e0       	ldi	r24, 0x0F	; 15
     d68:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
		SEC_1 = UART_recieveByte();
     d6c:	0e 94 cb 12 	call	0x2596	; 0x2596 <UART_recieveByte>
     d70:	80 93 79 00 	sts	0x0079, r24
		break;
	}
}
     d74:	0f 90       	pop	r0
     d76:	0f 90       	pop	r0
     d78:	cf 91       	pop	r28
     d7a:	df 91       	pop	r29
     d7c:	08 95       	ret

00000d7e <start>:
/*
 * Description :
 * Function responsible for turning microwave ON
 */
void start(void)
{
     d7e:	df 93       	push	r29
     d80:	cf 93       	push	r28
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
	/* Checking DOOR is open or close and enter to turning ON microwave after insuring DOOR is closed */
	if(GPIO_readPin(PORTC_ID, PIN0_ID))
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	0e 94 ca 10 	call	0x2194	; 0x2194 <GPIO_readPin>
     d8e:	88 23       	and	r24, r24
     d90:	69 f1       	breq	.+90     	; 0xdec <start+0x6e>
	{
		/* Checking all digits is zero or not */
		if( (SEC_1 == INTIAL_VALUE) && (SEC_2 == INTIAL_VALUE) && (MIN_1 == INTIAL_VALUE) && (MIN_2 == INTIAL_VALUE) )
     d92:	80 91 79 00 	lds	r24, 0x0079
     d96:	88 23       	and	r24, r24
     d98:	81 f4       	brne	.+32     	; 0xdba <start+0x3c>
     d9a:	80 91 7a 00 	lds	r24, 0x007A
     d9e:	88 23       	and	r24, r24
     da0:	61 f4       	brne	.+24     	; 0xdba <start+0x3c>
     da2:	80 91 7b 00 	lds	r24, 0x007B
     da6:	88 23       	and	r24, r24
     da8:	41 f4       	brne	.+16     	; 0xdba <start+0x3c>
     daa:	80 91 7c 00 	lds	r24, 0x007C
     dae:	88 23       	and	r24, r24
     db0:	21 f4       	brne	.+8      	; 0xdba <start+0x3c>
		{
			/* In case all digits is zero microwave will not working and
			 * send FINISH byte to Keypad to receive another digits
			 */
			UART_sendByte(FINISH);
     db2:	8f e0       	ldi	r24, 0x0F	; 15
     db4:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
     db8:	1c c0       	rjmp	.+56     	; 0xdf2 <start+0x74>
		}
		else
		{
			/* Init-ialize Timer call back function */
			Timer1_setCallBack(countdown);
     dba:	87 e3       	ldi	r24, 0x37	; 55
     dbc:	97 e0       	ldi	r25, 0x07	; 7
     dbe:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <Timer1_setCallBack>

			/* Timer delay for 1 Second with Compare Interrupt */
			Timer_Config.T1_Comp_Value = 15625;
     dc2:	89 e0       	ldi	r24, 0x09	; 9
     dc4:	9d e3       	ldi	r25, 0x3D	; 61
     dc6:	90 93 72 00 	sts	0x0072, r25
     dca:	80 93 71 00 	sts	0x0071, r24

			/* Timer Init-ialization with structure */
			Timer_init(&Timer_Config);
     dce:	88 e6       	ldi	r24, 0x68	; 104
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 c8 0c 	call	0x1990	; 0x1990 <Timer_init>

			/* Turning Internal light ON */
			internalLight_on();
     dd6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <internalLight_on>

			/* Switch on DC Motor */
			DcMotor_Rotate(CW);
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DcMotor_Rotate>

			/* set the variable */
			check_start = FIRST_DIG;
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	80 93 78 00 	sts	0x0078, r24

			/* reset the variable */
			STOP_PAUSE_temp = INTIAL_VALUE;
     de6:	10 92 7f 00 	sts	0x007F, r1
     dea:	03 c0       	rjmp	.+6      	; 0xdf2 <start+0x74>
		}
	}
	/* In case door is open microwave will not turning ON */
	else
	{
		UART_sendByte(FINISH);
     dec:	8f e0       	ldi	r24, 0x0F	; 15
     dee:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
	}
}
     df2:	cf 91       	pop	r28
     df4:	df 91       	pop	r29
     df6:	08 95       	ret

00000df8 <stop>:
/*
 * Description :
 * Function responsible for stop microwave
 */
void stop(void)
{
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	cd b7       	in	r28, 0x3d	; 61
     dfe:	de b7       	in	r29, 0x3e	; 62
	pause();
     e00:	0e 94 0d 07 	call	0xe1a	; 0xe1a <pause>

	SEC_1 = INTIAL_VALUE;
     e04:	10 92 79 00 	sts	0x0079, r1
	SEC_2 = INTIAL_VALUE;
     e08:	10 92 7a 00 	sts	0x007A, r1
	MIN_1 = INTIAL_VALUE;
     e0c:	10 92 7b 00 	sts	0x007B, r1
	MIN_2 = INTIAL_VALUE;
     e10:	10 92 7c 00 	sts	0x007C, r1
}
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <pause>:
/*
 * Description :
 * Function responsible for pause microwave
 */
void pause(void)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 CompareA Interrupt */
	CLEAR_BIT(TIMSK, OCIE1A);
     e22:	a9 e5       	ldi	r26, 0x59	; 89
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	e9 e5       	ldi	r30, 0x59	; 89
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	8f 7e       	andi	r24, 0xEF	; 239
     e2e:	8c 93       	st	X, r24

	/* Stop the DC-Motor */
	DcMotor_Rotate(ST);
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DcMotor_Rotate>

	/* Turning Internal light OFF */
	internalLight_off();
     e36:	0e 94 18 0b 	call	0x1630	; 0x1630 <internalLight_off>

	/* reset the variable */
	check_start = INTIAL_VALUE;
     e3a:	10 92 78 00 	sts	0x0078, r1

	/* send FINISH byte to Keypad to receive another digits */
	UART_sendByte(FINISH);
     e3e:	8f e0       	ldi	r24, 0x0F	; 15
     e40:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
}
     e44:	cf 91       	pop	r28
     e46:	df 91       	pop	r29
     e48:	08 95       	ret

00000e4a <ZERO_DIG>:
/*
 * Description :
 * Function responsible for setting all digits to ZERO
 */
void ZERO_DIG(void)
{
     e4a:	df 93       	push	r29
     e4c:	cf 93       	push	r28
     e4e:	cd b7       	in	r28, 0x3d	; 61
     e50:	de b7       	in	r29, 0x3e	; 62
	/* Reset all digits to ZERO */
	SEC_1 = INTIAL_VALUE;
     e52:	10 92 79 00 	sts	0x0079, r1
	SEC_2 = INTIAL_VALUE;
     e56:	10 92 7a 00 	sts	0x007A, r1
	MIN_1 = INTIAL_VALUE;
     e5a:	10 92 7b 00 	sts	0x007B, r1
	MIN_2 = INTIAL_VALUE;
     e5e:	10 92 7c 00 	sts	0x007C, r1

	/* Send ZERO_DIG byte to receive digits in 1st display location */
	UART_sendByte(DIG_ZEROS);
     e62:	8b e0       	ldi	r24, 0x0B	; 11
     e64:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
}
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <countdown>:
/*
 * Description :
 * Function responsible for counting down the timer
 */
void countdown(void)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
	/* Checking all digits is reach to zero or not */
	if( (SEC_1 == INTIAL_VALUE) && (SEC_2 == INTIAL_VALUE) && (MIN_1 == INTIAL_VALUE) && (MIN_2 == INTIAL_VALUE) )
     e76:	80 91 79 00 	lds	r24, 0x0079
     e7a:	88 23       	and	r24, r24
     e7c:	f9 f4       	brne	.+62     	; 0xebc <countdown+0x4e>
     e7e:	80 91 7a 00 	lds	r24, 0x007A
     e82:	88 23       	and	r24, r24
     e84:	d9 f4       	brne	.+54     	; 0xebc <countdown+0x4e>
     e86:	80 91 7b 00 	lds	r24, 0x007B
     e8a:	88 23       	and	r24, r24
     e8c:	b9 f4       	brne	.+46     	; 0xebc <countdown+0x4e>
     e8e:	80 91 7c 00 	lds	r24, 0x007C
     e92:	88 23       	and	r24, r24
     e94:	99 f4       	brne	.+38     	; 0xebc <countdown+0x4e>
	{
		/* Stop the microwave */
		stop();
     e96:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <stop>

		/* Turning ON buzzer after finishing */
		buzzer_on();
     e9a:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzer_on>

		/* Init-ialize Timer call back function */
		Timer1_setCallBack(after_finish);
     e9e:	8d ed       	ldi	r24, 0xDD	; 221
     ea0:	97 e0       	ldi	r25, 0x07	; 7
     ea2:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <Timer1_setCallBack>

		/* Timer delay for 2 Second with Compare Interrupt */
		Timer_Config.T1_Comp_Value = 30000;
     ea6:	80 e3       	ldi	r24, 0x30	; 48
     ea8:	95 e7       	ldi	r25, 0x75	; 117
     eaa:	90 93 72 00 	sts	0x0072, r25
     eae:	80 93 71 00 	sts	0x0071, r24

		/* Timer Init-ialization with structure */
		Timer_init(&Timer_Config);
     eb2:	88 e6       	ldi	r24, 0x68	; 104
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	0e 94 c8 0c 	call	0x1990	; 0x1990 <Timer_init>
     eba:	40 c0       	rjmp	.+128    	; 0xf3c <countdown+0xce>
	}

	/* setting all digits to count down */
	else if((SEC_1 & 0x0F) == INTIAL_VALUE)
     ebc:	80 91 79 00 	lds	r24, 0x0079
     ec0:	88 2f       	mov	r24, r24
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	8f 70       	andi	r24, 0x0F	; 15
     ec6:	90 70       	andi	r25, 0x00	; 0
     ec8:	00 97       	sbiw	r24, 0x00	; 0
     eca:	99 f5       	brne	.+102    	; 0xf32 <countdown+0xc4>
	{
		SEC_1 = 9;
     ecc:	89 e0       	ldi	r24, 0x09	; 9
     ece:	80 93 79 00 	sts	0x0079, r24
		if((SEC_2 & 0x0F) == INTIAL_VALUE)
     ed2:	80 91 7a 00 	lds	r24, 0x007A
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	8f 70       	andi	r24, 0x0F	; 15
     edc:	90 70       	andi	r25, 0x00	; 0
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	11 f5       	brne	.+68     	; 0xf26 <countdown+0xb8>
		{
			SEC_2 = 5;
     ee2:	85 e0       	ldi	r24, 0x05	; 5
     ee4:	80 93 7a 00 	sts	0x007A, r24
			if((MIN_1 & 0x0F) == INTIAL_VALUE)
     ee8:	80 91 7b 00 	lds	r24, 0x007B
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	8f 70       	andi	r24, 0x0F	; 15
     ef2:	90 70       	andi	r25, 0x00	; 0
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	89 f4       	brne	.+34     	; 0xf1a <countdown+0xac>
			{
				MIN_1 = 9;
     ef8:	89 e0       	ldi	r24, 0x09	; 9
     efa:	80 93 7b 00 	sts	0x007B, r24
				if((MIN_2 & 0x0F) != INTIAL_VALUE)
     efe:	80 91 7c 00 	lds	r24, 0x007C
     f02:	88 2f       	mov	r24, r24
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	8f 70       	andi	r24, 0x0F	; 15
     f08:	90 70       	andi	r25, 0x00	; 0
     f0a:	00 97       	sbiw	r24, 0x00	; 0
     f0c:	b9 f0       	breq	.+46     	; 0xf3c <countdown+0xce>
				{
					MIN_2--;
     f0e:	80 91 7c 00 	lds	r24, 0x007C
     f12:	81 50       	subi	r24, 0x01	; 1
     f14:	80 93 7c 00 	sts	0x007C, r24
     f18:	11 c0       	rjmp	.+34     	; 0xf3c <countdown+0xce>
				}
			}
			else
			{
				MIN_1--;
     f1a:	80 91 7b 00 	lds	r24, 0x007B
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	80 93 7b 00 	sts	0x007B, r24
     f24:	0b c0       	rjmp	.+22     	; 0xf3c <countdown+0xce>
			}
		}
		else
		{
			SEC_2--;
     f26:	80 91 7a 00 	lds	r24, 0x007A
     f2a:	81 50       	subi	r24, 0x01	; 1
     f2c:	80 93 7a 00 	sts	0x007A, r24
     f30:	05 c0       	rjmp	.+10     	; 0xf3c <countdown+0xce>
		}
	}
	else
	{
		SEC_1--;
     f32:	80 91 79 00 	lds	r24, 0x0079
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	80 93 79 00 	sts	0x0079, r24
	}
}
     f3c:	cf 91       	pop	r28
     f3e:	df 91       	pop	r29
     f40:	08 95       	ret

00000f42 <interrupts_init>:
/*
 * Description :
 * Function responsible for init-alizing External Interrupt
 */
void interrupts_init(void)
{
     f42:	df 93       	push	r29
     f44:	cf 93       	push	r28
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
	/* Set Pin direction as input */
	GPIO_setupPinDirection(PORTD_ID, PIN3_ID, PIN_INPUT);
     f4a:	83 e0       	ldi	r24, 0x03	; 3
     f4c:	63 e0       	ldi	r22, 0x03	; 3
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>

	/* Enable External INT1 */
	SET_BIT(GICR, INT1);
     f54:	ab e5       	ldi	r26, 0x5B	; 91
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	eb e5       	ldi	r30, 0x5B	; 91
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	80 68       	ori	r24, 0x80	; 128
     f60:	8c 93       	st	X, r24

	/* Set INT1 to interrupt at Rising Edge
	 * ISC10 = 1
	 * ISC11 = 1
	 */
	MCUCR |= 0X0C;
     f62:	a5 e5       	ldi	r26, 0x55	; 85
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e5 e5       	ldi	r30, 0x55	; 85
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	8c 60       	ori	r24, 0x0C	; 12
     f6e:	8c 93       	st	X, r24
}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <stop_pause>:
 * Description :
 * Function responsible for stop or pause microwave after turning it ON or reset all digits in case
 * microwave isn't ON
 */
void stop_pause(void)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	/* In case microwave is ON set it pause or stop */
	if(check_start)
     f7e:	80 91 78 00 	lds	r24, 0x0078
     f82:	88 23       	and	r24, r24
     f84:	a9 f0       	breq	.+42     	; 0xfb0 <stop_pause+0x3a>
	{
		STOP_PAUSE_temp++;
     f86:	80 91 7f 00 	lds	r24, 0x007F
     f8a:	8f 5f       	subi	r24, 0xFF	; 255
     f8c:	80 93 7f 00 	sts	0x007F, r24

		if(STOP_PAUSE_temp == 1)
     f90:	80 91 7f 00 	lds	r24, 0x007F
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	19 f4       	brne	.+6      	; 0xf9e <stop_pause+0x28>
		{
			pause();
     f98:	0e 94 0d 07 	call	0xe1a	; 0xe1a <pause>
     f9c:	0b c0       	rjmp	.+22     	; 0xfb4 <stop_pause+0x3e>
		}
		else if(STOP_PAUSE_temp == 2)
     f9e:	80 91 7f 00 	lds	r24, 0x007F
     fa2:	82 30       	cpi	r24, 0x02	; 2
     fa4:	39 f4       	brne	.+14     	; 0xfb4 <stop_pause+0x3e>
		{
			ZERO_DIG();
     fa6:	0e 94 25 07 	call	0xe4a	; 0xe4a <ZERO_DIG>
			STOP_PAUSE_temp = INTIAL_VALUE;
     faa:	10 92 7f 00 	sts	0x007F, r1
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <stop_pause+0x3e>
	}

	/* In case microwave is OFF, reset all digits */
	else
	{
		ZERO_DIG();
     fb0:	0e 94 25 07 	call	0xe4a	; 0xe4a <ZERO_DIG>
	}
}
     fb4:	cf 91       	pop	r28
     fb6:	df 91       	pop	r29
     fb8:	08 95       	ret

00000fba <after_finish>:
/*
 * Description :
 * Function responsible for stop alarm after microwave finishing
 */
void after_finish(void)
{
     fba:	df 93       	push	r29
     fbc:	cf 93       	push	r28
     fbe:	cd b7       	in	r28, 0x3d	; 61
     fc0:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 CompareA Interrupt */
	CLEAR_BIT(TIMSK, OCIE1A);
     fc2:	a9 e5       	ldi	r26, 0x59	; 89
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e9 e5       	ldi	r30, 0x59	; 89
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	8f 7e       	andi	r24, 0xEF	; 239
     fce:	8c 93       	st	X, r24

	/* Stop buzzer */
	buzzer_off();
     fd0:	0e 94 c0 05 	call	0xb80	; 0xb80 <buzzer_off>

	/* send FINISH byte to Keypad to receive new digits */
	UART_sendByte(FINISH);
     fd4:	8f e0       	ldi	r24, 0x0F	; 15
     fd6:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
}
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <INT1_setCallBack>:
/*
 * Description :
 * Function responsible for setting the call back function
 */
void INT1_setCallBack	(void(*a_ptr)(void))
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <INT1_setCallBack+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_INT1 = a_ptr;
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	90 93 7e 00 	sts	0x007E, r25
     ff6:	80 93 7d 00 	sts	0x007D, r24
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <__vector_11>:
/*
 * Description :
 * UART Interrupt Handler
 */
ISR(USART_RXC_vect)
{
    1004:	1f 92       	push	r1
    1006:	0f 92       	push	r0
    1008:	0f b6       	in	r0, 0x3f	; 63
    100a:	0f 92       	push	r0
    100c:	11 24       	eor	r1, r1
    100e:	8f 93       	push	r24
    1010:	ef 93       	push	r30
    1012:	ff 93       	push	r31
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
	received_temp = UDR;
    101c:	ec e2       	ldi	r30, 0x2C	; 44
    101e:	f0 e0       	ldi	r31, 0x00	; 0
    1020:	80 81       	ld	r24, Z
    1022:	80 93 81 00 	sts	0x0081, r24
}
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	8f 91       	pop	r24
    1030:	0f 90       	pop	r0
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	0f 90       	pop	r0
    1036:	1f 90       	pop	r1
    1038:	18 95       	reti

0000103a <main>:


int main(void)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	cd b7       	in	r28, 0x3d	; 61
    1040:	de b7       	in	r29, 0x3e	; 62
    1042:	c4 54       	subi	r28, 0x44	; 68
    1044:	d0 40       	sbci	r29, 0x00	; 0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
	/* Init-ialize Buzzer Driver */
	buzzer_init();
    1050:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzer_init>

	/* Init-ialize Motor Driver */
	DcMotor_Init();
    1054:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <DcMotor_Init>

	/* Init-ialize Internal Light Driver */
	internalLight_init();
    1058:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <internalLight_init>

	/* Init-ialize external interrupt pin as input & Enable the external interrupt */
	interrupts_init();
    105c:	0e 94 a1 07 	call	0xf42	; 0xf42 <interrupts_init>

	/* Init-ialize DOOR pin */
	GPIO_setupPinDirection(PORTC_ID, PIN0_ID, PIN_INPUT);
    1060:	82 e0       	ldi	r24, 0x02	; 2
    1062:	60 e0       	ldi	r22, 0x00	; 0
    1064:	40 e0       	ldi	r20, 0x00	; 0
    1066:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>

	/* Init-ialize Digit displaying  */
	display_init();
    106a:	0e 94 ff 05 	call	0xbfe	; 0xbfe <display_init>
	 * 8 Bit Data
	 * Baud-rate = 9600 Bits/Sec.
	 * One Stop Bit
	 * Disable Parity
	 */
	UART_ConfigType UART_Config = {Bits_8, BR_9600, Stop_1_Bit, Parity_Disable};
    106e:	9e 01       	movw	r18, r28
    1070:	27 5c       	subi	r18, 0xC7	; 199
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	22 96       	adiw	r28, 0x02	; 2
    1076:	3f af       	std	Y+63, r19	; 0x3f
    1078:	2e af       	std	Y+62, r18	; 0x3e
    107a:	22 97       	sbiw	r28, 0x02	; 2
    107c:	83 e7       	ldi	r24, 0x73	; 115
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	24 96       	adiw	r28, 0x04	; 4
    1082:	9f af       	std	Y+63, r25	; 0x3f
    1084:	8e af       	std	Y+62, r24	; 0x3e
    1086:	24 97       	sbiw	r28, 0x04	; 4
    1088:	95 e0       	ldi	r25, 0x05	; 5
    108a:	25 96       	adiw	r28, 0x05	; 5
    108c:	9f af       	std	Y+63, r25	; 0x3f
    108e:	25 97       	sbiw	r28, 0x05	; 5
    1090:	24 96       	adiw	r28, 0x04	; 4
    1092:	ee ad       	ldd	r30, Y+62	; 0x3e
    1094:	ff ad       	ldd	r31, Y+63	; 0x3f
    1096:	24 97       	sbiw	r28, 0x04	; 4
    1098:	00 80       	ld	r0, Z
    109a:	24 96       	adiw	r28, 0x04	; 4
    109c:	2e ad       	ldd	r18, Y+62	; 0x3e
    109e:	3f ad       	ldd	r19, Y+63	; 0x3f
    10a0:	24 97       	sbiw	r28, 0x04	; 4
    10a2:	2f 5f       	subi	r18, 0xFF	; 255
    10a4:	3f 4f       	sbci	r19, 0xFF	; 255
    10a6:	24 96       	adiw	r28, 0x04	; 4
    10a8:	3f af       	std	Y+63, r19	; 0x3f
    10aa:	2e af       	std	Y+62, r18	; 0x3e
    10ac:	24 97       	sbiw	r28, 0x04	; 4
    10ae:	22 96       	adiw	r28, 0x02	; 2
    10b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    10b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    10b4:	22 97       	sbiw	r28, 0x02	; 2
    10b6:	00 82       	st	Z, r0
    10b8:	22 96       	adiw	r28, 0x02	; 2
    10ba:	2e ad       	ldd	r18, Y+62	; 0x3e
    10bc:	3f ad       	ldd	r19, Y+63	; 0x3f
    10be:	22 97       	sbiw	r28, 0x02	; 2
    10c0:	2f 5f       	subi	r18, 0xFF	; 255
    10c2:	3f 4f       	sbci	r19, 0xFF	; 255
    10c4:	22 96       	adiw	r28, 0x02	; 2
    10c6:	3f af       	std	Y+63, r19	; 0x3f
    10c8:	2e af       	std	Y+62, r18	; 0x3e
    10ca:	22 97       	sbiw	r28, 0x02	; 2
    10cc:	25 96       	adiw	r28, 0x05	; 5
    10ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    10d0:	25 97       	sbiw	r28, 0x05	; 5
    10d2:	31 50       	subi	r19, 0x01	; 1
    10d4:	25 96       	adiw	r28, 0x05	; 5
    10d6:	3f af       	std	Y+63, r19	; 0x3f
    10d8:	25 97       	sbiw	r28, 0x05	; 5
    10da:	25 96       	adiw	r28, 0x05	; 5
    10dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    10de:	25 97       	sbiw	r28, 0x05	; 5
    10e0:	88 23       	and	r24, r24
    10e2:	b1 f6       	brne	.-84     	; 0x1090 <main+0x56>
	UART_init(&UART_Config);
    10e4:	ce 01       	movw	r24, r28
    10e6:	c9 96       	adiw	r24, 0x39	; 57
    10e8:	0e 94 32 12 	call	0x2464	; 0x2464 <UART_init>


	/* Enable UART RX Interrupt flag */
	SET_BIT(UCSRB, RXCIE);
    10ec:	aa e2       	ldi	r26, 0x2A	; 42
    10ee:	b0 e0       	ldi	r27, 0x00	; 0
    10f0:	ea e2       	ldi	r30, 0x2A	; 42
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	80 68       	ori	r24, 0x80	; 128
    10f8:	8c 93       	st	X, r24

	/* Enable Global Interrupt I-Bit */
	SREG |= (1<<7);
    10fa:	af e5       	ldi	r26, 0x5F	; 95
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	ef e5       	ldi	r30, 0x5F	; 95
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	80 68       	ori	r24, 0x80	; 128
    1106:	8c 93       	st	X, r24

	/* Init-ialize External Interrupt function address */
	INT1_setCallBack(stop_pause);
    1108:	8b eb       	ldi	r24, 0xBB	; 187
    110a:	97 e0       	ldi	r25, 0x07	; 7
    110c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <INT1_setCallBack>

	/* Send IAM_READY byte to Microwave Keypad to ask it to send the inputs */
	UART_sendByte(IAM_READY);
    1110:	84 e6       	ldi	r24, 0x64	; 100
    1112:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>

	for(;;)
	{
		/* According to received byte if it digit or start motor */
		switch(received_temp)
    1116:	80 91 81 00 	lds	r24, 0x0081
    111a:	e8 2f       	mov	r30, r24
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	ff af       	std	Y+63, r31	; 0x3f
    1120:	ee af       	std	Y+62, r30	; 0x3e
    1122:	2e ad       	ldd	r18, Y+62	; 0x3e
    1124:	3f ad       	ldd	r19, Y+63	; 0x3f
    1126:	2c 30       	cpi	r18, 0x0C	; 12
    1128:	31 05       	cpc	r19, r1
    112a:	c1 f0       	breq	.+48     	; 0x115c <main+0x122>
    112c:	8e ad       	ldd	r24, Y+62	; 0x3e
    112e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1130:	80 31       	cpi	r24, 0x10	; 16
    1132:	91 05       	cpc	r25, r1
    1134:	b9 f4       	brne	.+46     	; 0x1164 <main+0x12a>
		{
		case DIGITS:
			/* Reset variable to not enter again unless received new byte */
			received_temp = INTIAL_VALUE;
    1136:	10 92 81 00 	sts	0x0081, r1

			/* Disable UART RX Interrupt flag */
			CLEAR_BIT(UCSRB, RXCIE);
    113a:	aa e2       	ldi	r26, 0x2A	; 42
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ea e2       	ldi	r30, 0x2A	; 42
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	8f 77       	andi	r24, 0x7F	; 127
    1146:	8c 93       	st	X, r24

			/* Function responsible for setting display digits */
			set_digits();
    1148:	0e 94 56 06 	call	0xcac	; 0xcac <set_digits>

			/* Enable UART RX Interrupt flag */
			SET_BIT(UCSRB, RXCIE);
    114c:	aa e2       	ldi	r26, 0x2A	; 42
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	ea e2       	ldi	r30, 0x2A	; 42
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	80 68       	ori	r24, 0x80	; 128
    1158:	8c 93       	st	X, r24
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <main+0x12a>
			break;

		case START:
			/* Reset variable to not enter again unless received new byte */
			received_temp = INTIAL_VALUE;
    115c:	10 92 81 00 	sts	0x0081, r1

			/* Function responsible for turning microwave ON */
			start();
    1160:	0e 94 bf 06 	call	0xd7e	; 0xd7e <start>
			break;
		}

		/* Checking if door opened suddenly during microwave is ON */
		if(check_start)
    1164:	80 91 78 00 	lds	r24, 0x0078
    1168:	88 23       	and	r24, r24
    116a:	49 f0       	breq	.+18     	; 0x117e <main+0x144>
		{
			/* If Door is opened suddenly and microwave is ON, it will stop */
			if(!GPIO_readPin(PORTC_ID, PIN0_ID))
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	0e 94 ca 10 	call	0x2194	; 0x2194 <GPIO_readPin>
    1174:	88 23       	and	r24, r24
    1176:	71 f4       	brne	.+28     	; 0x1194 <main+0x15a>
			{
				/* Function responsible for pause microwave */
				pause();
    1178:	0e 94 0d 07 	call	0xe1a	; 0xe1a <pause>
    117c:	0b c0       	rjmp	.+22     	; 0x1194 <main+0x15a>
			}
		}

		/* In case microwave is OFF and door is closed */
		else if(GPIO_readPin(PORTC_ID, PIN0_ID))
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	60 e0       	ldi	r22, 0x00	; 0
    1182:	0e 94 ca 10 	call	0x2194	; 0x2194 <GPIO_readPin>
    1186:	88 23       	and	r24, r24
    1188:	19 f0       	breq	.+6      	; 0x1190 <main+0x156>
		{
			/* Turning Internal light OFF */
			internalLight_off();
    118a:	0e 94 18 0b 	call	0x1630	; 0x1630 <internalLight_off>
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <main+0x15a>

		/* In case microwave is OFF and door is open */
		else
		{
			/* Turning Internal light ON */
			internalLight_on();
    1190:	0e 94 0c 0b 	call	0x1618	; 0x1618 <internalLight_on>
		}


		/* Enable & Disable every 2 milli-second 7-Segments pins to show counter */
		PORTB &= 0XF0;
    1194:	a8 e3       	ldi	r26, 0x38	; 56
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e8 e3       	ldi	r30, 0x38	; 56
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	80 7f       	andi	r24, 0xF0	; 240
    11a0:	8c 93       	st	X, r24
		SET_BIT(PORTB, 0);
    11a2:	a8 e3       	ldi	r26, 0x38	; 56
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e8 e3       	ldi	r30, 0x38	; 56
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	81 60       	ori	r24, 0x01	; 1
    11ae:	8c 93       	st	X, r24
		PORTA = (PORTA & 0XF0) | (SEC_1 & 0X0F);
    11b0:	ab e3       	ldi	r26, 0x3B	; 59
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	eb e3       	ldi	r30, 0x3B	; 59
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	80 81       	ld	r24, Z
    11ba:	98 2f       	mov	r25, r24
    11bc:	90 7f       	andi	r25, 0xF0	; 240
    11be:	80 91 79 00 	lds	r24, 0x0079
    11c2:	8f 70       	andi	r24, 0x0F	; 15
    11c4:	89 2b       	or	r24, r25
    11c6:	8c 93       	st	X, r24
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	a0 e0       	ldi	r26, 0x00	; 0
    11ce:	b0 e4       	ldi	r27, 0x40	; 64
    11d0:	8d ab       	std	Y+53, r24	; 0x35
    11d2:	9e ab       	std	Y+54, r25	; 0x36
    11d4:	af ab       	std	Y+55, r26	; 0x37
    11d6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11d8:	6d a9       	ldd	r22, Y+53	; 0x35
    11da:	7e a9       	ldd	r23, Y+54	; 0x36
    11dc:	8f a9       	ldd	r24, Y+55	; 0x37
    11de:	98 ad       	ldd	r25, Y+56	; 0x38
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	4a e7       	ldi	r20, 0x7A	; 122
    11e6:	53 e4       	ldi	r21, 0x43	; 67
    11e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ec:	dc 01       	movw	r26, r24
    11ee:	cb 01       	movw	r24, r22
    11f0:	89 ab       	std	Y+49, r24	; 0x31
    11f2:	9a ab       	std	Y+50, r25	; 0x32
    11f4:	ab ab       	std	Y+51, r26	; 0x33
    11f6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    11f8:	69 a9       	ldd	r22, Y+49	; 0x31
    11fa:	7a a9       	ldd	r23, Y+50	; 0x32
    11fc:	8b a9       	ldd	r24, Y+51	; 0x33
    11fe:	9c a9       	ldd	r25, Y+52	; 0x34
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	40 e8       	ldi	r20, 0x80	; 128
    1206:	5f e3       	ldi	r21, 0x3F	; 63
    1208:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    120c:	88 23       	and	r24, r24
    120e:	2c f4       	brge	.+10     	; 0x121a <main+0x1e0>
		__ticks = 1;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	98 ab       	std	Y+48, r25	; 0x30
    1216:	8f a7       	std	Y+47, r24	; 0x2f
    1218:	3f c0       	rjmp	.+126    	; 0x1298 <main+0x25e>
	else if (__tmp > 65535)
    121a:	69 a9       	ldd	r22, Y+49	; 0x31
    121c:	7a a9       	ldd	r23, Y+50	; 0x32
    121e:	8b a9       	ldd	r24, Y+51	; 0x33
    1220:	9c a9       	ldd	r25, Y+52	; 0x34
    1222:	20 e0       	ldi	r18, 0x00	; 0
    1224:	3f ef       	ldi	r19, 0xFF	; 255
    1226:	4f e7       	ldi	r20, 0x7F	; 127
    1228:	57 e4       	ldi	r21, 0x47	; 71
    122a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    122e:	18 16       	cp	r1, r24
    1230:	4c f5       	brge	.+82     	; 0x1284 <main+0x24a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1232:	6d a9       	ldd	r22, Y+53	; 0x35
    1234:	7e a9       	ldd	r23, Y+54	; 0x36
    1236:	8f a9       	ldd	r24, Y+55	; 0x37
    1238:	98 ad       	ldd	r25, Y+56	; 0x38
    123a:	20 e0       	ldi	r18, 0x00	; 0
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	40 e2       	ldi	r20, 0x20	; 32
    1240:	51 e4       	ldi	r21, 0x41	; 65
    1242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1246:	dc 01       	movw	r26, r24
    1248:	cb 01       	movw	r24, r22
    124a:	bc 01       	movw	r22, r24
    124c:	cd 01       	movw	r24, r26
    124e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1252:	dc 01       	movw	r26, r24
    1254:	cb 01       	movw	r24, r22
    1256:	98 ab       	std	Y+48, r25	; 0x30
    1258:	8f a7       	std	Y+47, r24	; 0x2f
    125a:	0f c0       	rjmp	.+30     	; 0x127a <main+0x240>
    125c:	89 e1       	ldi	r24, 0x19	; 25
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	9e a7       	std	Y+46, r25	; 0x2e
    1262:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1264:	8d a5       	ldd	r24, Y+45	; 0x2d
    1266:	9e a5       	ldd	r25, Y+46	; 0x2e
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	f1 f7       	brne	.-4      	; 0x1268 <main+0x22e>
    126c:	9e a7       	std	Y+46, r25	; 0x2e
    126e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1270:	8f a5       	ldd	r24, Y+47	; 0x2f
    1272:	98 a9       	ldd	r25, Y+48	; 0x30
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	98 ab       	std	Y+48, r25	; 0x30
    1278:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	8f a5       	ldd	r24, Y+47	; 0x2f
    127c:	98 a9       	ldd	r25, Y+48	; 0x30
    127e:	00 97       	sbiw	r24, 0x00	; 0
    1280:	69 f7       	brne	.-38     	; 0x125c <main+0x222>
    1282:	14 c0       	rjmp	.+40     	; 0x12ac <main+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1284:	69 a9       	ldd	r22, Y+49	; 0x31
    1286:	7a a9       	ldd	r23, Y+50	; 0x32
    1288:	8b a9       	ldd	r24, Y+51	; 0x33
    128a:	9c a9       	ldd	r25, Y+52	; 0x34
    128c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1290:	dc 01       	movw	r26, r24
    1292:	cb 01       	movw	r24, r22
    1294:	98 ab       	std	Y+48, r25	; 0x30
    1296:	8f a7       	std	Y+47, r24	; 0x2f
    1298:	8f a5       	ldd	r24, Y+47	; 0x2f
    129a:	98 a9       	ldd	r25, Y+48	; 0x30
    129c:	9c a7       	std	Y+44, r25	; 0x2c
    129e:	8b a7       	std	Y+43, r24	; 0x2b
    12a0:	8b a5       	ldd	r24, Y+43	; 0x2b
    12a2:	9c a5       	ldd	r25, Y+44	; 0x2c
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	f1 f7       	brne	.-4      	; 0x12a4 <main+0x26a>
    12a8:	9c a7       	std	Y+44, r25	; 0x2c
    12aa:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		PORTB &= 0XF0;
    12ac:	a8 e3       	ldi	r26, 0x38	; 56
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e8 e3       	ldi	r30, 0x38	; 56
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	80 7f       	andi	r24, 0xF0	; 240
    12b8:	8c 93       	st	X, r24
		SET_BIT(PORTB, 1);
    12ba:	a8 e3       	ldi	r26, 0x38	; 56
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e8 e3       	ldi	r30, 0x38	; 56
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	82 60       	ori	r24, 0x02	; 2
    12c6:	8c 93       	st	X, r24
		PORTA = (PORTA & 0XF0) | (SEC_2 & 0X0F);
    12c8:	ab e3       	ldi	r26, 0x3B	; 59
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	eb e3       	ldi	r30, 0x3B	; 59
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	98 2f       	mov	r25, r24
    12d4:	90 7f       	andi	r25, 0xF0	; 240
    12d6:	80 91 7a 00 	lds	r24, 0x007A
    12da:	8f 70       	andi	r24, 0x0F	; 15
    12dc:	89 2b       	or	r24, r25
    12de:	8c 93       	st	X, r24
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a0 e0       	ldi	r26, 0x00	; 0
    12e6:	b0 e4       	ldi	r27, 0x40	; 64
    12e8:	8f a3       	std	Y+39, r24	; 0x27
    12ea:	98 a7       	std	Y+40, r25	; 0x28
    12ec:	a9 a7       	std	Y+41, r26	; 0x29
    12ee:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f0:	6f a1       	ldd	r22, Y+39	; 0x27
    12f2:	78 a5       	ldd	r23, Y+40	; 0x28
    12f4:	89 a5       	ldd	r24, Y+41	; 0x29
    12f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	4a e7       	ldi	r20, 0x7A	; 122
    12fe:	53 e4       	ldi	r21, 0x43	; 67
    1300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1304:	dc 01       	movw	r26, r24
    1306:	cb 01       	movw	r24, r22
    1308:	8b a3       	std	Y+35, r24	; 0x23
    130a:	9c a3       	std	Y+36, r25	; 0x24
    130c:	ad a3       	std	Y+37, r26	; 0x25
    130e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1310:	6b a1       	ldd	r22, Y+35	; 0x23
    1312:	7c a1       	ldd	r23, Y+36	; 0x24
    1314:	8d a1       	ldd	r24, Y+37	; 0x25
    1316:	9e a1       	ldd	r25, Y+38	; 0x26
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e8       	ldi	r20, 0x80	; 128
    131e:	5f e3       	ldi	r21, 0x3F	; 63
    1320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1324:	88 23       	and	r24, r24
    1326:	2c f4       	brge	.+10     	; 0x1332 <main+0x2f8>
		__ticks = 1;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	9a a3       	std	Y+34, r25	; 0x22
    132e:	89 a3       	std	Y+33, r24	; 0x21
    1330:	3f c0       	rjmp	.+126    	; 0x13b0 <main+0x376>
	else if (__tmp > 65535)
    1332:	6b a1       	ldd	r22, Y+35	; 0x23
    1334:	7c a1       	ldd	r23, Y+36	; 0x24
    1336:	8d a1       	ldd	r24, Y+37	; 0x25
    1338:	9e a1       	ldd	r25, Y+38	; 0x26
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	3f ef       	ldi	r19, 0xFF	; 255
    133e:	4f e7       	ldi	r20, 0x7F	; 127
    1340:	57 e4       	ldi	r21, 0x47	; 71
    1342:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1346:	18 16       	cp	r1, r24
    1348:	4c f5       	brge	.+82     	; 0x139c <main+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    134a:	6f a1       	ldd	r22, Y+39	; 0x27
    134c:	78 a5       	ldd	r23, Y+40	; 0x28
    134e:	89 a5       	ldd	r24, Y+41	; 0x29
    1350:	9a a5       	ldd	r25, Y+42	; 0x2a
    1352:	20 e0       	ldi	r18, 0x00	; 0
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	40 e2       	ldi	r20, 0x20	; 32
    1358:	51 e4       	ldi	r21, 0x41	; 65
    135a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	bc 01       	movw	r22, r24
    1364:	cd 01       	movw	r24, r26
    1366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	9a a3       	std	Y+34, r25	; 0x22
    1370:	89 a3       	std	Y+33, r24	; 0x21
    1372:	0f c0       	rjmp	.+30     	; 0x1392 <main+0x358>
    1374:	89 e1       	ldi	r24, 0x19	; 25
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	98 a3       	std	Y+32, r25	; 0x20
    137a:	8f 8f       	std	Y+31, r24	; 0x1f
    137c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    137e:	98 a1       	ldd	r25, Y+32	; 0x20
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	f1 f7       	brne	.-4      	; 0x1380 <main+0x346>
    1384:	98 a3       	std	Y+32, r25	; 0x20
    1386:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1388:	89 a1       	ldd	r24, Y+33	; 0x21
    138a:	9a a1       	ldd	r25, Y+34	; 0x22
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	9a a3       	std	Y+34, r25	; 0x22
    1390:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1392:	89 a1       	ldd	r24, Y+33	; 0x21
    1394:	9a a1       	ldd	r25, Y+34	; 0x22
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	69 f7       	brne	.-38     	; 0x1374 <main+0x33a>
    139a:	14 c0       	rjmp	.+40     	; 0x13c4 <main+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    139c:	6b a1       	ldd	r22, Y+35	; 0x23
    139e:	7c a1       	ldd	r23, Y+36	; 0x24
    13a0:	8d a1       	ldd	r24, Y+37	; 0x25
    13a2:	9e a1       	ldd	r25, Y+38	; 0x26
    13a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	9a a3       	std	Y+34, r25	; 0x22
    13ae:	89 a3       	std	Y+33, r24	; 0x21
    13b0:	89 a1       	ldd	r24, Y+33	; 0x21
    13b2:	9a a1       	ldd	r25, Y+34	; 0x22
    13b4:	9e 8f       	std	Y+30, r25	; 0x1e
    13b6:	8d 8f       	std	Y+29, r24	; 0x1d
    13b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13bc:	01 97       	sbiw	r24, 0x01	; 1
    13be:	f1 f7       	brne	.-4      	; 0x13bc <main+0x382>
    13c0:	9e 8f       	std	Y+30, r25	; 0x1e
    13c2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		PORTB &= 0XF0;
    13c4:	a8 e3       	ldi	r26, 0x38	; 56
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	e8 e3       	ldi	r30, 0x38	; 56
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	80 7f       	andi	r24, 0xF0	; 240
    13d0:	8c 93       	st	X, r24
		SET_BIT(PORTB, 2);
    13d2:	a8 e3       	ldi	r26, 0x38	; 56
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e8 e3       	ldi	r30, 0x38	; 56
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	84 60       	ori	r24, 0x04	; 4
    13de:	8c 93       	st	X, r24
		PORTA = (PORTA & 0XF0) | (MIN_1 & 0X0F);
    13e0:	ab e3       	ldi	r26, 0x3B	; 59
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	eb e3       	ldi	r30, 0x3B	; 59
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	98 2f       	mov	r25, r24
    13ec:	90 7f       	andi	r25, 0xF0	; 240
    13ee:	80 91 7b 00 	lds	r24, 0x007B
    13f2:	8f 70       	andi	r24, 0x0F	; 15
    13f4:	89 2b       	or	r24, r25
    13f6:	8c 93       	st	X, r24
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	a0 e0       	ldi	r26, 0x00	; 0
    13fe:	b0 e4       	ldi	r27, 0x40	; 64
    1400:	89 8f       	std	Y+25, r24	; 0x19
    1402:	9a 8f       	std	Y+26, r25	; 0x1a
    1404:	ab 8f       	std	Y+27, r26	; 0x1b
    1406:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1408:	69 8d       	ldd	r22, Y+25	; 0x19
    140a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    140e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1410:	20 e0       	ldi	r18, 0x00	; 0
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	4a e7       	ldi	r20, 0x7A	; 122
    1416:	53 e4       	ldi	r21, 0x43	; 67
    1418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8d 8b       	std	Y+21, r24	; 0x15
    1422:	9e 8b       	std	Y+22, r25	; 0x16
    1424:	af 8b       	std	Y+23, r26	; 0x17
    1426:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1428:	6d 89       	ldd	r22, Y+21	; 0x15
    142a:	7e 89       	ldd	r23, Y+22	; 0x16
    142c:	8f 89       	ldd	r24, Y+23	; 0x17
    142e:	98 8d       	ldd	r25, Y+24	; 0x18
    1430:	20 e0       	ldi	r18, 0x00	; 0
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	40 e8       	ldi	r20, 0x80	; 128
    1436:	5f e3       	ldi	r21, 0x3F	; 63
    1438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    143c:	88 23       	and	r24, r24
    143e:	2c f4       	brge	.+10     	; 0x144a <main+0x410>
		__ticks = 1;
    1440:	81 e0       	ldi	r24, 0x01	; 1
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	9c 8b       	std	Y+20, r25	; 0x14
    1446:	8b 8b       	std	Y+19, r24	; 0x13
    1448:	3f c0       	rjmp	.+126    	; 0x14c8 <main+0x48e>
	else if (__tmp > 65535)
    144a:	6d 89       	ldd	r22, Y+21	; 0x15
    144c:	7e 89       	ldd	r23, Y+22	; 0x16
    144e:	8f 89       	ldd	r24, Y+23	; 0x17
    1450:	98 8d       	ldd	r25, Y+24	; 0x18
    1452:	20 e0       	ldi	r18, 0x00	; 0
    1454:	3f ef       	ldi	r19, 0xFF	; 255
    1456:	4f e7       	ldi	r20, 0x7F	; 127
    1458:	57 e4       	ldi	r21, 0x47	; 71
    145a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    145e:	18 16       	cp	r1, r24
    1460:	4c f5       	brge	.+82     	; 0x14b4 <main+0x47a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1462:	69 8d       	ldd	r22, Y+25	; 0x19
    1464:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1466:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1468:	9c 8d       	ldd	r25, Y+28	; 0x1c
    146a:	20 e0       	ldi	r18, 0x00	; 0
    146c:	30 e0       	ldi	r19, 0x00	; 0
    146e:	40 e2       	ldi	r20, 0x20	; 32
    1470:	51 e4       	ldi	r21, 0x41	; 65
    1472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1476:	dc 01       	movw	r26, r24
    1478:	cb 01       	movw	r24, r22
    147a:	bc 01       	movw	r22, r24
    147c:	cd 01       	movw	r24, r26
    147e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1482:	dc 01       	movw	r26, r24
    1484:	cb 01       	movw	r24, r22
    1486:	9c 8b       	std	Y+20, r25	; 0x14
    1488:	8b 8b       	std	Y+19, r24	; 0x13
    148a:	0f c0       	rjmp	.+30     	; 0x14aa <main+0x470>
    148c:	89 e1       	ldi	r24, 0x19	; 25
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	9a 8b       	std	Y+18, r25	; 0x12
    1492:	89 8b       	std	Y+17, r24	; 0x11
    1494:	89 89       	ldd	r24, Y+17	; 0x11
    1496:	9a 89       	ldd	r25, Y+18	; 0x12
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	f1 f7       	brne	.-4      	; 0x1498 <main+0x45e>
    149c:	9a 8b       	std	Y+18, r25	; 0x12
    149e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a0:	8b 89       	ldd	r24, Y+19	; 0x13
    14a2:	9c 89       	ldd	r25, Y+20	; 0x14
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	9c 8b       	std	Y+20, r25	; 0x14
    14a8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14aa:	8b 89       	ldd	r24, Y+19	; 0x13
    14ac:	9c 89       	ldd	r25, Y+20	; 0x14
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	69 f7       	brne	.-38     	; 0x148c <main+0x452>
    14b2:	14 c0       	rjmp	.+40     	; 0x14dc <main+0x4a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14b4:	6d 89       	ldd	r22, Y+21	; 0x15
    14b6:	7e 89       	ldd	r23, Y+22	; 0x16
    14b8:	8f 89       	ldd	r24, Y+23	; 0x17
    14ba:	98 8d       	ldd	r25, Y+24	; 0x18
    14bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9c 8b       	std	Y+20, r25	; 0x14
    14c6:	8b 8b       	std	Y+19, r24	; 0x13
    14c8:	8b 89       	ldd	r24, Y+19	; 0x13
    14ca:	9c 89       	ldd	r25, Y+20	; 0x14
    14cc:	98 8b       	std	Y+16, r25	; 0x10
    14ce:	8f 87       	std	Y+15, r24	; 0x0f
    14d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d2:	98 89       	ldd	r25, Y+16	; 0x10
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <main+0x49a>
    14d8:	98 8b       	std	Y+16, r25	; 0x10
    14da:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);

		PORTB &= 0XF0;
    14dc:	a8 e3       	ldi	r26, 0x38	; 56
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	e8 e3       	ldi	r30, 0x38	; 56
    14e2:	f0 e0       	ldi	r31, 0x00	; 0
    14e4:	80 81       	ld	r24, Z
    14e6:	80 7f       	andi	r24, 0xF0	; 240
    14e8:	8c 93       	st	X, r24
		SET_BIT(PORTB, 3);
    14ea:	a8 e3       	ldi	r26, 0x38	; 56
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e8 e3       	ldi	r30, 0x38	; 56
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	88 60       	ori	r24, 0x08	; 8
    14f6:	8c 93       	st	X, r24
		PORTA = (PORTA & 0XF0) | (MIN_2 & 0X0F);
    14f8:	ab e3       	ldi	r26, 0x3B	; 59
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	eb e3       	ldi	r30, 0x3B	; 59
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	98 2f       	mov	r25, r24
    1504:	90 7f       	andi	r25, 0xF0	; 240
    1506:	80 91 7c 00 	lds	r24, 0x007C
    150a:	8f 70       	andi	r24, 0x0F	; 15
    150c:	89 2b       	or	r24, r25
    150e:	8c 93       	st	X, r24
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	a0 e0       	ldi	r26, 0x00	; 0
    1516:	b0 e4       	ldi	r27, 0x40	; 64
    1518:	8b 87       	std	Y+11, r24	; 0x0b
    151a:	9c 87       	std	Y+12, r25	; 0x0c
    151c:	ad 87       	std	Y+13, r26	; 0x0d
    151e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1520:	6b 85       	ldd	r22, Y+11	; 0x0b
    1522:	7c 85       	ldd	r23, Y+12	; 0x0c
    1524:	8d 85       	ldd	r24, Y+13	; 0x0d
    1526:	9e 85       	ldd	r25, Y+14	; 0x0e
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	4a e7       	ldi	r20, 0x7A	; 122
    152e:	53 e4       	ldi	r21, 0x43	; 67
    1530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	8f 83       	std	Y+7, r24	; 0x07
    153a:	98 87       	std	Y+8, r25	; 0x08
    153c:	a9 87       	std	Y+9, r26	; 0x09
    153e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1540:	6f 81       	ldd	r22, Y+7	; 0x07
    1542:	78 85       	ldd	r23, Y+8	; 0x08
    1544:	89 85       	ldd	r24, Y+9	; 0x09
    1546:	9a 85       	ldd	r25, Y+10	; 0x0a
    1548:	20 e0       	ldi	r18, 0x00	; 0
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	40 e8       	ldi	r20, 0x80	; 128
    154e:	5f e3       	ldi	r21, 0x3F	; 63
    1550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1554:	88 23       	and	r24, r24
    1556:	2c f4       	brge	.+10     	; 0x1562 <main+0x528>
		__ticks = 1;
    1558:	81 e0       	ldi	r24, 0x01	; 1
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	3f c0       	rjmp	.+126    	; 0x15e0 <main+0x5a6>
	else if (__tmp > 65535)
    1562:	6f 81       	ldd	r22, Y+7	; 0x07
    1564:	78 85       	ldd	r23, Y+8	; 0x08
    1566:	89 85       	ldd	r24, Y+9	; 0x09
    1568:	9a 85       	ldd	r25, Y+10	; 0x0a
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	3f ef       	ldi	r19, 0xFF	; 255
    156e:	4f e7       	ldi	r20, 0x7F	; 127
    1570:	57 e4       	ldi	r21, 0x47	; 71
    1572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1576:	18 16       	cp	r1, r24
    1578:	4c f5       	brge	.+82     	; 0x15cc <main+0x592>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    157a:	6b 85       	ldd	r22, Y+11	; 0x0b
    157c:	7c 85       	ldd	r23, Y+12	; 0x0c
    157e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1580:	9e 85       	ldd	r25, Y+14	; 0x0e
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e2       	ldi	r20, 0x20	; 32
    1588:	51 e4       	ldi	r21, 0x41	; 65
    158a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    158e:	dc 01       	movw	r26, r24
    1590:	cb 01       	movw	r24, r22
    1592:	bc 01       	movw	r22, r24
    1594:	cd 01       	movw	r24, r26
    1596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9e 83       	std	Y+6, r25	; 0x06
    15a0:	8d 83       	std	Y+5, r24	; 0x05
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <main+0x588>
    15a4:	89 e1       	ldi	r24, 0x19	; 25
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	9c 83       	std	Y+4, r25	; 0x04
    15aa:	8b 83       	std	Y+3, r24	; 0x03
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	01 97       	sbiw	r24, 0x01	; 1
    15b2:	f1 f7       	brne	.-4      	; 0x15b0 <main+0x576>
    15b4:	9c 83       	std	Y+4, r25	; 0x04
    15b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ba:	9e 81       	ldd	r25, Y+6	; 0x06
    15bc:	01 97       	sbiw	r24, 0x01	; 1
    15be:	9e 83       	std	Y+6, r25	; 0x06
    15c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15c2:	8d 81       	ldd	r24, Y+5	; 0x05
    15c4:	9e 81       	ldd	r25, Y+6	; 0x06
    15c6:	00 97       	sbiw	r24, 0x00	; 0
    15c8:	69 f7       	brne	.-38     	; 0x15a4 <main+0x56a>
    15ca:	a5 cd       	rjmp	.-1206   	; 0x1116 <main+0xdc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15cc:	6f 81       	ldd	r22, Y+7	; 0x07
    15ce:	78 85       	ldd	r23, Y+8	; 0x08
    15d0:	89 85       	ldd	r24, Y+9	; 0x09
    15d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d8:	dc 01       	movw	r26, r24
    15da:	cb 01       	movw	r24, r22
    15dc:	9e 83       	std	Y+6, r25	; 0x06
    15de:	8d 83       	std	Y+5, r24	; 0x05
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	9a 83       	std	Y+2, r25	; 0x02
    15e6:	89 83       	std	Y+1, r24	; 0x01
    15e8:	89 81       	ldd	r24, Y+1	; 0x01
    15ea:	9a 81       	ldd	r25, Y+2	; 0x02
    15ec:	01 97       	sbiw	r24, 0x01	; 1
    15ee:	f1 f7       	brne	.-4      	; 0x15ec <main+0x5b2>
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	90 cd       	rjmp	.-1248   	; 0x1116 <main+0xdc>

000015f6 <internalLight_init>:
/*
 * Description :
 * Function responsible for initiate Internal Light pin direction and its initial state
 */
void internalLight_init(void)
{
    15f6:	df 93       	push	r29
    15f8:	cf 93       	push	r28
    15fa:	cd b7       	in	r28, 0x3d	; 61
    15fc:	de b7       	in	r29, 0x3e	; 62
	/* setup pin direction as output */
	GPIO_setupPinDirection(PORTC_ID, PIN3_ID, PIN_OUTPUT);
    15fe:	82 e0       	ldi	r24, 0x02	; 2
    1600:	63 e0       	ldi	r22, 0x03	; 3
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>

	/* set Internal Light initial state as turned off */
	GPIO_writePin(PORTC_ID, PIN3_ID, LOGIC_LOW);
    1608:	82 e0       	ldi	r24, 0x02	; 2
    160a:	63 e0       	ldi	r22, 0x03	; 3
    160c:	40 e0       	ldi	r20, 0x00	; 0
    160e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
}
    1612:	cf 91       	pop	r28
    1614:	df 91       	pop	r29
    1616:	08 95       	ret

00001618 <internalLight_on>:
/*
 * Description :
 * Function responsible for turn on Internal Light
 */
void internalLight_on(void)
{
    1618:	df 93       	push	r29
    161a:	cf 93       	push	r28
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN3_ID, LOGIC_HIGH);
    1620:	82 e0       	ldi	r24, 0x02	; 2
    1622:	63 e0       	ldi	r22, 0x03	; 3
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
}
    162a:	cf 91       	pop	r28
    162c:	df 91       	pop	r29
    162e:	08 95       	ret

00001630 <internalLight_off>:
/*
 * Description :
 * Function responsible for turn off Internal Light
 */
void internalLight_off(void)
{
    1630:	df 93       	push	r29
    1632:	cf 93       	push	r28
    1634:	cd b7       	in	r28, 0x3d	; 61
    1636:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(PORTC_ID, PIN3_ID, LOGIC_LOW);
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	63 e0       	ldi	r22, 0x03	; 3
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    1648:	1f 92       	push	r1
    164a:	0f 92       	push	r0
    164c:	0f b6       	in	r0, 0x3f	; 63
    164e:	0f 92       	push	r0
    1650:	11 24       	eor	r1, r1
    1652:	2f 93       	push	r18
    1654:	3f 93       	push	r19
    1656:	4f 93       	push	r20
    1658:	5f 93       	push	r21
    165a:	6f 93       	push	r22
    165c:	7f 93       	push	r23
    165e:	8f 93       	push	r24
    1660:	9f 93       	push	r25
    1662:	af 93       	push	r26
    1664:	bf 93       	push	r27
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    1672:	80 91 82 00 	lds	r24, 0x0082
    1676:	90 91 83 00 	lds	r25, 0x0083
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	d1 f0       	breq	.+52     	; 0x16b2 <__vector_9+0x6a>
	{
		if(T_ovf_flag == T_ovf_counter)
    167e:	20 91 8b 00 	lds	r18, 0x008B
    1682:	30 91 8c 00 	lds	r19, 0x008C
    1686:	80 91 89 00 	lds	r24, 0x0089
    168a:	90 91 8a 00 	lds	r25, 0x008A
    168e:	28 17       	cp	r18, r24
    1690:	39 07       	cpc	r19, r25
    1692:	31 f4       	brne	.+12     	; 0x16a0 <__vector_9+0x58>
		{
			/* Call the Call Back function in the application after Timer Over Flow */
			(*g_callBackPtr_Timer0)();
    1694:	e0 91 82 00 	lds	r30, 0x0082
    1698:	f0 91 83 00 	lds	r31, 0x0083
    169c:	09 95       	icall
    169e:	09 c0       	rjmp	.+18     	; 0x16b2 <__vector_9+0x6a>
		}
		else
		{
			T_ovf_flag++;
    16a0:	80 91 8b 00 	lds	r24, 0x008B
    16a4:	90 91 8c 00 	lds	r25, 0x008C
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	90 93 8c 00 	sts	0x008C, r25
    16ae:	80 93 8b 00 	sts	0x008B, r24
		}
	}
}
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	ff 91       	pop	r31
    16b8:	ef 91       	pop	r30
    16ba:	bf 91       	pop	r27
    16bc:	af 91       	pop	r26
    16be:	9f 91       	pop	r25
    16c0:	8f 91       	pop	r24
    16c2:	7f 91       	pop	r23
    16c4:	6f 91       	pop	r22
    16c6:	5f 91       	pop	r21
    16c8:	4f 91       	pop	r20
    16ca:	3f 91       	pop	r19
    16cc:	2f 91       	pop	r18
    16ce:	0f 90       	pop	r0
    16d0:	0f be       	out	0x3f, r0	; 63
    16d2:	0f 90       	pop	r0
    16d4:	1f 90       	pop	r1
    16d6:	18 95       	reti

000016d8 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
    16d8:	1f 92       	push	r1
    16da:	0f 92       	push	r0
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	0f 92       	push	r0
    16e0:	11 24       	eor	r1, r1
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	ef 93       	push	r30
    16f8:	ff 93       	push	r31
    16fa:	df 93       	push	r29
    16fc:	cf 93       	push	r28
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	if(T_ovf_flag == T_ovf_counter)
    1702:	20 91 8b 00 	lds	r18, 0x008B
    1706:	30 91 8c 00 	lds	r19, 0x008C
    170a:	80 91 89 00 	lds	r24, 0x0089
    170e:	90 91 8a 00 	lds	r25, 0x008A
    1712:	28 17       	cp	r18, r24
    1714:	39 07       	cpc	r19, r25
    1716:	61 f4       	brne	.+24     	; 0x1730 <__vector_8+0x58>
	{
		if(g_callBackPtr_Timer1 != NULL_PTR)
    1718:	80 91 84 00 	lds	r24, 0x0084
    171c:	90 91 85 00 	lds	r25, 0x0085
    1720:	00 97       	sbiw	r24, 0x00	; 0
    1722:	79 f0       	breq	.+30     	; 0x1742 <__vector_8+0x6a>
		{
			/* Call the Call Back function in the application after Timer Over Flow */
			(*g_callBackPtr_Timer1)();
    1724:	e0 91 84 00 	lds	r30, 0x0084
    1728:	f0 91 85 00 	lds	r31, 0x0085
    172c:	09 95       	icall
    172e:	09 c0       	rjmp	.+18     	; 0x1742 <__vector_8+0x6a>
		}
	}
	else
	{
		T_ovf_flag++;
    1730:	80 91 8b 00 	lds	r24, 0x008B
    1734:	90 91 8c 00 	lds	r25, 0x008C
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	90 93 8c 00 	sts	0x008C, r25
    173e:	80 93 8b 00 	sts	0x008B, r24
	}

}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	ff 91       	pop	r31
    1748:	ef 91       	pop	r30
    174a:	bf 91       	pop	r27
    174c:	af 91       	pop	r26
    174e:	9f 91       	pop	r25
    1750:	8f 91       	pop	r24
    1752:	7f 91       	pop	r23
    1754:	6f 91       	pop	r22
    1756:	5f 91       	pop	r21
    1758:	4f 91       	pop	r20
    175a:	3f 91       	pop	r19
    175c:	2f 91       	pop	r18
    175e:	0f 90       	pop	r0
    1760:	0f be       	out	0x3f, r0	; 63
    1762:	0f 90       	pop	r0
    1764:	1f 90       	pop	r1
    1766:	18 95       	reti

00001768 <__vector_4>:

ISR(TIMER2_OVF_vect)
{
    1768:	1f 92       	push	r1
    176a:	0f 92       	push	r0
    176c:	0f b6       	in	r0, 0x3f	; 63
    176e:	0f 92       	push	r0
    1770:	11 24       	eor	r1, r1
    1772:	2f 93       	push	r18
    1774:	3f 93       	push	r19
    1776:	4f 93       	push	r20
    1778:	5f 93       	push	r21
    177a:	6f 93       	push	r22
    177c:	7f 93       	push	r23
    177e:	8f 93       	push	r24
    1780:	9f 93       	push	r25
    1782:	af 93       	push	r26
    1784:	bf 93       	push	r27
    1786:	ef 93       	push	r30
    1788:	ff 93       	push	r31
    178a:	df 93       	push	r29
    178c:	cf 93       	push	r28
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
	if(T_ovf_flag == T_ovf_counter)
    1792:	20 91 8b 00 	lds	r18, 0x008B
    1796:	30 91 8c 00 	lds	r19, 0x008C
    179a:	80 91 89 00 	lds	r24, 0x0089
    179e:	90 91 8a 00 	lds	r25, 0x008A
    17a2:	28 17       	cp	r18, r24
    17a4:	39 07       	cpc	r19, r25
    17a6:	61 f4       	brne	.+24     	; 0x17c0 <__vector_4+0x58>
	{
		if(g_callBackPtr_Timer2 != NULL_PTR)
    17a8:	80 91 86 00 	lds	r24, 0x0086
    17ac:	90 91 87 00 	lds	r25, 0x0087
    17b0:	00 97       	sbiw	r24, 0x00	; 0
    17b2:	79 f0       	breq	.+30     	; 0x17d2 <__vector_4+0x6a>
		{
			/* Call the Call Back function in the application after Timer Over Flow */
			(*g_callBackPtr_Timer2)();
    17b4:	e0 91 86 00 	lds	r30, 0x0086
    17b8:	f0 91 87 00 	lds	r31, 0x0087
    17bc:	09 95       	icall
    17be:	09 c0       	rjmp	.+18     	; 0x17d2 <__vector_4+0x6a>
		}
	}
	else
	{
		T_ovf_flag++;
    17c0:	80 91 8b 00 	lds	r24, 0x008B
    17c4:	90 91 8c 00 	lds	r25, 0x008C
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	90 93 8c 00 	sts	0x008C, r25
    17ce:	80 93 8b 00 	sts	0x008B, r24
	}

}
    17d2:	cf 91       	pop	r28
    17d4:	df 91       	pop	r29
    17d6:	ff 91       	pop	r31
    17d8:	ef 91       	pop	r30
    17da:	bf 91       	pop	r27
    17dc:	af 91       	pop	r26
    17de:	9f 91       	pop	r25
    17e0:	8f 91       	pop	r24
    17e2:	7f 91       	pop	r23
    17e4:	6f 91       	pop	r22
    17e6:	5f 91       	pop	r21
    17e8:	4f 91       	pop	r20
    17ea:	3f 91       	pop	r19
    17ec:	2f 91       	pop	r18
    17ee:	0f 90       	pop	r0
    17f0:	0f be       	out	0x3f, r0	; 63
    17f2:	0f 90       	pop	r0
    17f4:	1f 90       	pop	r1
    17f6:	18 95       	reti

000017f8 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    17f8:	1f 92       	push	r1
    17fa:	0f 92       	push	r0
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	0f 92       	push	r0
    1800:	11 24       	eor	r1, r1
    1802:	2f 93       	push	r18
    1804:	3f 93       	push	r19
    1806:	4f 93       	push	r20
    1808:	5f 93       	push	r21
    180a:	6f 93       	push	r22
    180c:	7f 93       	push	r23
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	af 93       	push	r26
    1814:	bf 93       	push	r27
    1816:	ef 93       	push	r30
    1818:	ff 93       	push	r31
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer0 != NULL_PTR)
    1822:	80 91 82 00 	lds	r24, 0x0082
    1826:	90 91 83 00 	lds	r25, 0x0083
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	29 f0       	breq	.+10     	; 0x1838 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after Timer reach to Compare value */
		(*g_callBackPtr_Timer0)();
    182e:	e0 91 82 00 	lds	r30, 0x0082
    1832:	f0 91 83 00 	lds	r31, 0x0083
    1836:	09 95       	icall
	}
}
    1838:	cf 91       	pop	r28
    183a:	df 91       	pop	r29
    183c:	ff 91       	pop	r31
    183e:	ef 91       	pop	r30
    1840:	bf 91       	pop	r27
    1842:	af 91       	pop	r26
    1844:	9f 91       	pop	r25
    1846:	8f 91       	pop	r24
    1848:	7f 91       	pop	r23
    184a:	6f 91       	pop	r22
    184c:	5f 91       	pop	r21
    184e:	4f 91       	pop	r20
    1850:	3f 91       	pop	r19
    1852:	2f 91       	pop	r18
    1854:	0f 90       	pop	r0
    1856:	0f be       	out	0x3f, r0	; 63
    1858:	0f 90       	pop	r0
    185a:	1f 90       	pop	r1
    185c:	18 95       	reti

0000185e <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
    185e:	1f 92       	push	r1
    1860:	0f 92       	push	r0
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	0f 92       	push	r0
    1866:	11 24       	eor	r1, r1
    1868:	2f 93       	push	r18
    186a:	3f 93       	push	r19
    186c:	4f 93       	push	r20
    186e:	5f 93       	push	r21
    1870:	6f 93       	push	r22
    1872:	7f 93       	push	r23
    1874:	8f 93       	push	r24
    1876:	9f 93       	push	r25
    1878:	af 93       	push	r26
    187a:	bf 93       	push	r27
    187c:	ef 93       	push	r30
    187e:	ff 93       	push	r31
    1880:	df 93       	push	r29
    1882:	cf 93       	push	r28
    1884:	cd b7       	in	r28, 0x3d	; 61
    1886:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    1888:	80 91 84 00 	lds	r24, 0x0084
    188c:	90 91 85 00 	lds	r25, 0x0085
    1890:	00 97       	sbiw	r24, 0x00	; 0
    1892:	29 f0       	breq	.+10     	; 0x189e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after Timer reach to Compare value */
		(*g_callBackPtr_Timer1)();
    1894:	e0 91 84 00 	lds	r30, 0x0084
    1898:	f0 91 85 00 	lds	r31, 0x0085
    189c:	09 95       	icall
	}
}
    189e:	cf 91       	pop	r28
    18a0:	df 91       	pop	r29
    18a2:	ff 91       	pop	r31
    18a4:	ef 91       	pop	r30
    18a6:	bf 91       	pop	r27
    18a8:	af 91       	pop	r26
    18aa:	9f 91       	pop	r25
    18ac:	8f 91       	pop	r24
    18ae:	7f 91       	pop	r23
    18b0:	6f 91       	pop	r22
    18b2:	5f 91       	pop	r21
    18b4:	4f 91       	pop	r20
    18b6:	3f 91       	pop	r19
    18b8:	2f 91       	pop	r18
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <__vector_7>:

ISR(TIMER1_COMPB_vect)
{
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	cd b7       	in	r28, 0x3d	; 61
    18ec:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer1 != NULL_PTR)
    18ee:	80 91 84 00 	lds	r24, 0x0084
    18f2:	90 91 85 00 	lds	r25, 0x0085
    18f6:	00 97       	sbiw	r24, 0x00	; 0
    18f8:	29 f0       	breq	.+10     	; 0x1904 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after Timer reach to Compare value */
		(*g_callBackPtr_Timer1)();
    18fa:	e0 91 84 00 	lds	r30, 0x0084
    18fe:	f0 91 85 00 	lds	r31, 0x0085
    1902:	09 95       	icall
	}
}
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	ff 91       	pop	r31
    190a:	ef 91       	pop	r30
    190c:	bf 91       	pop	r27
    190e:	af 91       	pop	r26
    1910:	9f 91       	pop	r25
    1912:	8f 91       	pop	r24
    1914:	7f 91       	pop	r23
    1916:	6f 91       	pop	r22
    1918:	5f 91       	pop	r21
    191a:	4f 91       	pop	r20
    191c:	3f 91       	pop	r19
    191e:	2f 91       	pop	r18
    1920:	0f 90       	pop	r0
    1922:	0f be       	out	0x3f, r0	; 63
    1924:	0f 90       	pop	r0
    1926:	1f 90       	pop	r1
    1928:	18 95       	reti

0000192a <__vector_3>:

ISR(TIMER2_COMP_vect)
{
    192a:	1f 92       	push	r1
    192c:	0f 92       	push	r0
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	0f 92       	push	r0
    1932:	11 24       	eor	r1, r1
    1934:	2f 93       	push	r18
    1936:	3f 93       	push	r19
    1938:	4f 93       	push	r20
    193a:	5f 93       	push	r21
    193c:	6f 93       	push	r22
    193e:	7f 93       	push	r23
    1940:	8f 93       	push	r24
    1942:	9f 93       	push	r25
    1944:	af 93       	push	r26
    1946:	bf 93       	push	r27
    1948:	ef 93       	push	r30
    194a:	ff 93       	push	r31
    194c:	df 93       	push	r29
    194e:	cf 93       	push	r28
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr_Timer2 != NULL_PTR)
    1954:	80 91 86 00 	lds	r24, 0x0086
    1958:	90 91 87 00 	lds	r25, 0x0087
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	29 f0       	breq	.+10     	; 0x196a <__vector_3+0x40>
	{
		/* Call the Call Back function in the application after Timer reach to Compare value */
		(*g_callBackPtr_Timer2)();
    1960:	e0 91 86 00 	lds	r30, 0x0086
    1964:	f0 91 87 00 	lds	r31, 0x0087
    1968:	09 95       	icall
	}
}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	ff 91       	pop	r31
    1970:	ef 91       	pop	r30
    1972:	bf 91       	pop	r27
    1974:	af 91       	pop	r26
    1976:	9f 91       	pop	r25
    1978:	8f 91       	pop	r24
    197a:	7f 91       	pop	r23
    197c:	6f 91       	pop	r22
    197e:	5f 91       	pop	r21
    1980:	4f 91       	pop	r20
    1982:	3f 91       	pop	r19
    1984:	2f 91       	pop	r18
    1986:	0f 90       	pop	r0
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	0f 90       	pop	r0
    198c:	1f 90       	pop	r1
    198e:	18 95       	reti

00001990 <Timer_init>:
/*
 * Description :
 * Function responsible for initiate timer with configuration from structure & Enable it
 */
void Timer_init(const Timer_ConfigType * Timer_Config_Ptr)
{
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <Timer_init+0x6>
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	89 83       	std	Y+1, r24	; 0x01
	if(Timer_Config_Ptr->T_Select == Timer0)
    199e:	e9 81       	ldd	r30, Y+1	; 0x01
    19a0:	fa 81       	ldd	r31, Y+2	; 0x02
    19a2:	80 81       	ld	r24, Z
    19a4:	88 23       	and	r24, r24
    19a6:	09 f0       	breq	.+2      	; 0x19aa <Timer_init+0x1a>
    19a8:	59 c0       	rjmp	.+178    	; 0x1a5c <Timer_init+0xcc>
	{
		if(Timer_Config_Ptr->T_Mode == T0_Ovf_Mode)
    19aa:	e9 81       	ldd	r30, Y+1	; 0x01
    19ac:	fa 81       	ldd	r31, Y+2	; 0x02
    19ae:	82 81       	ldd	r24, Z+2	; 0x02
    19b0:	88 23       	and	r24, r24
    19b2:	51 f5       	brne	.+84     	; 0x1a08 <Timer_init+0x78>
		{
			T_ovf_flag = 0;												/* set over flow flag to zero */
    19b4:	10 92 8c 00 	sts	0x008C, r1
    19b8:	10 92 8b 00 	sts	0x008B, r1
			T_ovf_counter = Timer_Config_Ptr->T_ovf_counter;			/* set number of over flow */
    19bc:	e9 81       	ldd	r30, Y+1	; 0x01
    19be:	fa 81       	ldd	r31, Y+2	; 0x02
    19c0:	86 81       	ldd	r24, Z+6	; 0x06
    19c2:	97 81       	ldd	r25, Z+7	; 0x07
    19c4:	90 93 8a 00 	sts	0x008A, r25
    19c8:	80 93 89 00 	sts	0x0089, r24
			TCNT0 = Timer_Config_Ptr->T0_T2_Initial_Value; 				/* Set Timer0 initial value */
    19cc:	a2 e5       	ldi	r26, 0x52	; 82
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e9 81       	ldd	r30, Y+1	; 0x01
    19d2:	fa 81       	ldd	r31, Y+2	; 0x02
    19d4:	83 81       	ldd	r24, Z+3	; 0x03
    19d6:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE0);										/* Enable Timer0 Overflow Interrupt */
    19d8:	a9 e5       	ldi	r26, 0x59	; 89
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e9 e5       	ldi	r30, 0x59	; 89
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	81 60       	ori	r24, 0x01	; 1
    19e4:	8c 93       	st	X, r24
			TCCR0 = (1<<FOC0);											/* Non PWM mode */
    19e6:	e3 e5       	ldi	r30, 0x53	; 83
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 e8       	ldi	r24, 0x80	; 128
    19ec:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer0 Pre-scaler */
    19ee:	a3 e5       	ldi	r26, 0x53	; 83
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e3 e5       	ldi	r30, 0x53	; 83
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	98 2f       	mov	r25, r24
    19fa:	98 7f       	andi	r25, 0xF8	; 248
    19fc:	e9 81       	ldd	r30, Y+1	; 0x01
    19fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1a00:	81 81       	ldd	r24, Z+1	; 0x01
    1a02:	89 2b       	or	r24, r25
    1a04:	8c 93       	st	X, r24
    1a06:	26 c1       	rjmp	.+588    	; 0x1c54 <Timer_init+0x2c4>

		}
		else if(Timer_Config_Ptr->T_Mode == T0_Compare_Mode)
    1a08:	e9 81       	ldd	r30, Y+1	; 0x01
    1a0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a0c:	82 81       	ldd	r24, Z+2	; 0x02
    1a0e:	81 30       	cpi	r24, 0x01	; 1
    1a10:	09 f0       	breq	.+2      	; 0x1a14 <Timer_init+0x84>
    1a12:	20 c1       	rjmp	.+576    	; 0x1c54 <Timer_init+0x2c4>
		{
			TCNT0 = Timer_Config_Ptr->T0_T2_Initial_Value;				/* Set Timer0 initial value */
    1a14:	a2 e5       	ldi	r26, 0x52	; 82
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e9 81       	ldd	r30, Y+1	; 0x01
    1a1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a1c:	83 81       	ldd	r24, Z+3	; 0x03
    1a1e:	8c 93       	st	X, r24
			OCR0 = Timer_Config_Ptr->T0_T2_Comp_Value;					/* Set Compare Value */
    1a20:	ac e5       	ldi	r26, 0x5C	; 92
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e9 81       	ldd	r30, Y+1	; 0x01
    1a26:	fa 81       	ldd	r31, Y+2	; 0x02
    1a28:	80 85       	ldd	r24, Z+8	; 0x08
    1a2a:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE0);										/* Enable Timer0 Compare Interrupt */
    1a2c:	a9 e5       	ldi	r26, 0x59	; 89
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	e9 e5       	ldi	r30, 0x59	; 89
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	82 60       	ori	r24, 0x02	; 2
    1a38:	8c 93       	st	X, r24
			TCCR0 = (1<<FOC0) | (1<<WGM01);								/* Non PWM mode and enable CTC Mode*/
    1a3a:	e3 e5       	ldi	r30, 0x53	; 83
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	88 e8       	ldi	r24, 0x88	; 136
    1a40:	80 83       	st	Z, r24
			TCCR0 = (TCCR0 & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer0 Pre-scaler */
    1a42:	a3 e5       	ldi	r26, 0x53	; 83
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e3 e5       	ldi	r30, 0x53	; 83
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	98 7f       	andi	r25, 0xF8	; 248
    1a50:	e9 81       	ldd	r30, Y+1	; 0x01
    1a52:	fa 81       	ldd	r31, Y+2	; 0x02
    1a54:	81 81       	ldd	r24, Z+1	; 0x01
    1a56:	89 2b       	or	r24, r25
    1a58:	8c 93       	st	X, r24
    1a5a:	fc c0       	rjmp	.+504    	; 0x1c54 <Timer_init+0x2c4>
		}
	}

	else if(Timer_Config_Ptr->T_Select == Timer1)
    1a5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a60:	80 81       	ld	r24, Z
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	09 f0       	breq	.+2      	; 0x1a68 <Timer_init+0xd8>
    1a66:	99 c0       	rjmp	.+306    	; 0x1b9a <Timer_init+0x20a>
	{
		if(Timer_Config_Ptr->T_Mode == T1_Ovf_Mode)
    1a68:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	82 30       	cpi	r24, 0x02	; 2
    1a70:	69 f5       	brne	.+90     	; 0x1acc <Timer_init+0x13c>
		{
			T_ovf_flag = 0;												/* set over flow flag to zero */
    1a72:	10 92 8c 00 	sts	0x008C, r1
    1a76:	10 92 8b 00 	sts	0x008B, r1
			T_ovf_counter = Timer_Config_Ptr->T_ovf_counter;			/* set number of over flow */
    1a7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a7e:	86 81       	ldd	r24, Z+6	; 0x06
    1a80:	97 81       	ldd	r25, Z+7	; 0x07
    1a82:	90 93 8a 00 	sts	0x008A, r25
    1a86:	80 93 89 00 	sts	0x0089, r24
			TCNT1 = Timer_Config_Ptr->T1_Initial_Value;					/* Set Timer1 initial value */
    1a8a:	ac e4       	ldi	r26, 0x4C	; 76
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a90:	fa 81       	ldd	r31, Y+2	; 0x02
    1a92:	84 81       	ldd	r24, Z+4	; 0x04
    1a94:	95 81       	ldd	r25, Z+5	; 0x05
    1a96:	11 96       	adiw	r26, 0x01	; 1
    1a98:	9c 93       	st	X, r25
    1a9a:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, TOIE1);										/* Enable Timer1 Overflow Interrupt */
    1a9c:	a9 e5       	ldi	r26, 0x59	; 89
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	e9 e5       	ldi	r30, 0x59	; 89
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	84 60       	ori	r24, 0x04	; 4
    1aa8:	8c 93       	st	X, r24
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);							/* Non PWM mode */
    1aaa:	ef e4       	ldi	r30, 0x4F	; 79
    1aac:	f0 e0       	ldi	r31, 0x00	; 0
    1aae:	8c e0       	ldi	r24, 0x0C	; 12
    1ab0:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer1 Pre-scaler */
    1ab2:	ae e4       	ldi	r26, 0x4E	; 78
    1ab4:	b0 e0       	ldi	r27, 0x00	; 0
    1ab6:	ee e4       	ldi	r30, 0x4E	; 78
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	98 2f       	mov	r25, r24
    1abe:	98 7f       	andi	r25, 0xF8	; 248
    1ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ac4:	81 81       	ldd	r24, Z+1	; 0x01
    1ac6:	89 2b       	or	r24, r25
    1ac8:	8c 93       	st	X, r24
    1aca:	c4 c0       	rjmp	.+392    	; 0x1c54 <Timer_init+0x2c4>
		}
		else if(Timer_Config_Ptr->T_Mode == T1_CompareA_Mode)
    1acc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ace:	fa 81       	ldd	r31, Y+2	; 0x02
    1ad0:	82 81       	ldd	r24, Z+2	; 0x02
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	71 f5       	brne	.+92     	; 0x1b32 <Timer_init+0x1a2>
		{
			TCNT1 = Timer_Config_Ptr->T1_Initial_Value;					/* Set Timer1 initial value */
    1ad6:	ac e4       	ldi	r26, 0x4C	; 76
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	e9 81       	ldd	r30, Y+1	; 0x01
    1adc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ade:	84 81       	ldd	r24, Z+4	; 0x04
    1ae0:	95 81       	ldd	r25, Z+5	; 0x05
    1ae2:	11 96       	adiw	r26, 0x01	; 1
    1ae4:	9c 93       	st	X, r25
    1ae6:	8e 93       	st	-X, r24
			OCR1A = Timer_Config_Ptr->T1_Comp_Value;					/* Set Compare Value */
    1ae8:	aa e4       	ldi	r26, 0x4A	; 74
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	e9 81       	ldd	r30, Y+1	; 0x01
    1aee:	fa 81       	ldd	r31, Y+2	; 0x02
    1af0:	81 85       	ldd	r24, Z+9	; 0x09
    1af2:	92 85       	ldd	r25, Z+10	; 0x0a
    1af4:	11 96       	adiw	r26, 0x01	; 1
    1af6:	9c 93       	st	X, r25
    1af8:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1A);										/* Enable Timer1 CompareA Interrupt */
    1afa:	a9 e5       	ldi	r26, 0x59	; 89
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	e9 e5       	ldi	r30, 0x59	; 89
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	80 61       	ori	r24, 0x10	; 16
    1b06:	8c 93       	st	X, r24
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);							/* Non PWM mode */
    1b08:	ef e4       	ldi	r30, 0x4F	; 79
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	8c e0       	ldi	r24, 0x0C	; 12
    1b0e:	80 83       	st	Z, r24
			TCCR1B = (1<<WGM12);										/* Enable CTC Mode */
    1b10:	ee e4       	ldi	r30, 0x4E	; 78
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	88 e0       	ldi	r24, 0x08	; 8
    1b16:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer1 Pre-scaler */
    1b18:	ae e4       	ldi	r26, 0x4E	; 78
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	ee e4       	ldi	r30, 0x4E	; 78
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	98 2f       	mov	r25, r24
    1b24:	98 7f       	andi	r25, 0xF8	; 248
    1b26:	e9 81       	ldd	r30, Y+1	; 0x01
    1b28:	fa 81       	ldd	r31, Y+2	; 0x02
    1b2a:	81 81       	ldd	r24, Z+1	; 0x01
    1b2c:	89 2b       	or	r24, r25
    1b2e:	8c 93       	st	X, r24
    1b30:	91 c0       	rjmp	.+290    	; 0x1c54 <Timer_init+0x2c4>

		}
		else if(Timer_Config_Ptr->T_Mode == T1_CompareB_Mode)
    1b32:	e9 81       	ldd	r30, Y+1	; 0x01
    1b34:	fa 81       	ldd	r31, Y+2	; 0x02
    1b36:	82 81       	ldd	r24, Z+2	; 0x02
    1b38:	84 30       	cpi	r24, 0x04	; 4
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <Timer_init+0x1ae>
    1b3c:	8b c0       	rjmp	.+278    	; 0x1c54 <Timer_init+0x2c4>
		{
			TCNT1 = Timer_Config_Ptr->T1_Initial_Value;					/* Set Timer1 initial value */
    1b3e:	ac e4       	ldi	r26, 0x4C	; 76
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e9 81       	ldd	r30, Y+1	; 0x01
    1b44:	fa 81       	ldd	r31, Y+2	; 0x02
    1b46:	84 81       	ldd	r24, Z+4	; 0x04
    1b48:	95 81       	ldd	r25, Z+5	; 0x05
    1b4a:	11 96       	adiw	r26, 0x01	; 1
    1b4c:	9c 93       	st	X, r25
    1b4e:	8e 93       	st	-X, r24
			OCR1B = Timer_Config_Ptr->T1_Comp_Value;					/* Set Compare Value */
    1b50:	a8 e4       	ldi	r26, 0x48	; 72
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	e9 81       	ldd	r30, Y+1	; 0x01
    1b56:	fa 81       	ldd	r31, Y+2	; 0x02
    1b58:	81 85       	ldd	r24, Z+9	; 0x09
    1b5a:	92 85       	ldd	r25, Z+10	; 0x0a
    1b5c:	11 96       	adiw	r26, 0x01	; 1
    1b5e:	9c 93       	st	X, r25
    1b60:	8e 93       	st	-X, r24
			SET_BIT(TIMSK, OCIE1B);										/* Enable Timer1 CompareB Interrupt */
    1b62:	a9 e5       	ldi	r26, 0x59	; 89
    1b64:	b0 e0       	ldi	r27, 0x00	; 0
    1b66:	e9 e5       	ldi	r30, 0x59	; 89
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	88 60       	ori	r24, 0x08	; 8
    1b6e:	8c 93       	st	X, r24
			TCCR1B = (1<<WGM12);										/* Enable CTC Mode */
    1b70:	ee e4       	ldi	r30, 0x4E	; 78
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	88 e0       	ldi	r24, 0x08	; 8
    1b76:	80 83       	st	Z, r24
			TCCR1A = (1<<FOC1A) | (1<<FOC1B);							/* Non PWM mode */
    1b78:	ef e4       	ldi	r30, 0x4F	; 79
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	8c e0       	ldi	r24, 0x0C	; 12
    1b7e:	80 83       	st	Z, r24
			TCCR1B = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);	/* Configure Timer1 Pre-scaler */
    1b80:	ae e4       	ldi	r26, 0x4E	; 78
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	ee e4       	ldi	r30, 0x4E	; 78
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	98 2f       	mov	r25, r24
    1b8c:	98 7f       	andi	r25, 0xF8	; 248
    1b8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b90:	fa 81       	ldd	r31, Y+2	; 0x02
    1b92:	81 81       	ldd	r24, Z+1	; 0x01
    1b94:	89 2b       	or	r24, r25
    1b96:	8c 93       	st	X, r24
    1b98:	5d c0       	rjmp	.+186    	; 0x1c54 <Timer_init+0x2c4>
		}
	}

	else if(Timer_Config_Ptr->T_Select == Timer2)
    1b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9e:	80 81       	ld	r24, Z
    1ba0:	82 30       	cpi	r24, 0x02	; 2
    1ba2:	09 f0       	breq	.+2      	; 0x1ba6 <Timer_init+0x216>
    1ba4:	57 c0       	rjmp	.+174    	; 0x1c54 <Timer_init+0x2c4>
	{
		if(Timer_Config_Ptr->T_Mode == T2_Ovf_Mode)
    1ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    1baa:	82 81       	ldd	r24, Z+2	; 0x02
    1bac:	85 30       	cpi	r24, 0x05	; 5
    1bae:	51 f5       	brne	.+84     	; 0x1c04 <Timer_init+0x274>
		{
			T_ovf_flag = 0;													/* set over flow flag to zero */
    1bb0:	10 92 8c 00 	sts	0x008C, r1
    1bb4:	10 92 8b 00 	sts	0x008B, r1
			T_ovf_counter = Timer_Config_Ptr->T_ovf_counter;				/* set number of over flow */
    1bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bba:	fa 81       	ldd	r31, Y+2	; 0x02
    1bbc:	86 81       	ldd	r24, Z+6	; 0x06
    1bbe:	97 81       	ldd	r25, Z+7	; 0x07
    1bc0:	90 93 8a 00 	sts	0x008A, r25
    1bc4:	80 93 89 00 	sts	0x0089, r24
			TCNT2 = Timer_Config_Ptr->T0_T2_Initial_Value;					/* Set Timer2 initial value */
    1bc8:	a4 e4       	ldi	r26, 0x44	; 68
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    1bce:	fa 81       	ldd	r31, Y+2	; 0x02
    1bd0:	83 81       	ldd	r24, Z+3	; 0x03
    1bd2:	8c 93       	st	X, r24
			SET_BIT(TIMSK, TOIE2);											/* Enable Timer2 Overflow Interrupt */
    1bd4:	a9 e5       	ldi	r26, 0x59	; 89
    1bd6:	b0 e0       	ldi	r27, 0x00	; 0
    1bd8:	e9 e5       	ldi	r30, 0x59	; 89
    1bda:	f0 e0       	ldi	r31, 0x00	; 0
    1bdc:	80 81       	ld	r24, Z
    1bde:	80 64       	ori	r24, 0x40	; 64
    1be0:	8c 93       	st	X, r24
			TCCR2 = (1<<FOC2);												/* Non PWM mode */
    1be2:	e5 e4       	ldi	r30, 0x45	; 69
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 e8       	ldi	r24, 0x80	; 128
    1be8:	80 83       	st	Z, r24
			TCCR2 = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);		/* Configure Timer2 Pre-scaler */
    1bea:	a5 e4       	ldi	r26, 0x45	; 69
    1bec:	b0 e0       	ldi	r27, 0x00	; 0
    1bee:	ee e4       	ldi	r30, 0x4E	; 78
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	80 81       	ld	r24, Z
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	98 7f       	andi	r25, 0xF8	; 248
    1bf8:	e9 81       	ldd	r30, Y+1	; 0x01
    1bfa:	fa 81       	ldd	r31, Y+2	; 0x02
    1bfc:	81 81       	ldd	r24, Z+1	; 0x01
    1bfe:	89 2b       	or	r24, r25
    1c00:	8c 93       	st	X, r24
    1c02:	28 c0       	rjmp	.+80     	; 0x1c54 <Timer_init+0x2c4>
		}
		else if(Timer_Config_Ptr->T_Mode == T2_Compare_Mode)
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	86 30       	cpi	r24, 0x06	; 6
    1c0c:	19 f5       	brne	.+70     	; 0x1c54 <Timer_init+0x2c4>
		{
			TCNT2 = Timer_Config_Ptr->T0_T2_Initial_Value;					/* Set Timer2 initial value */
    1c0e:	a4 e4       	ldi	r26, 0x44	; 68
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e9 81       	ldd	r30, Y+1	; 0x01
    1c14:	fa 81       	ldd	r31, Y+2	; 0x02
    1c16:	83 81       	ldd	r24, Z+3	; 0x03
    1c18:	8c 93       	st	X, r24
			OCR2 = Timer_Config_Ptr->T0_T2_Comp_Value;						/* Set Compare Value */
    1c1a:	a3 e4       	ldi	r26, 0x43	; 67
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c20:	fa 81       	ldd	r31, Y+2	; 0x02
    1c22:	80 85       	ldd	r24, Z+8	; 0x08
    1c24:	8c 93       	st	X, r24
			SET_BIT(TIMSK, OCIE2);											/* Enable Timer2 Compare Interrupt */
    1c26:	a9 e5       	ldi	r26, 0x59	; 89
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e9 e5       	ldi	r30, 0x59	; 89
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	80 68       	ori	r24, 0x80	; 128
    1c32:	8c 93       	st	X, r24
			TCCR2 = (1<<FOC2) | (1<<WGM21);									/* Non PWM mode and enable CTC Mode */
    1c34:	e5 e4       	ldi	r30, 0x45	; 69
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	88 e8       	ldi	r24, 0x88	; 136
    1c3a:	80 83       	st	Z, r24
			TCCR2 = (TCCR1B & 0XF8) | (Timer_Config_Ptr->T_Prescaler);		/* Configure Timer2 Pre-scaler */
    1c3c:	a5 e4       	ldi	r26, 0x45	; 69
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	ee e4       	ldi	r30, 0x4E	; 78
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	98 2f       	mov	r25, r24
    1c48:	98 7f       	andi	r25, 0xF8	; 248
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	81 81       	ldd	r24, Z+1	; 0x01
    1c50:	89 2b       	or	r24, r25
    1c52:	8c 93       	st	X, r24
		}
	}
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <Timer0_DeInit>:
/*
 * Description :
 * Functions to Disable Timers
 */
void Timer0_DeInit(void)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE0);									/* Disable Timer0 Overflow Interrupt */
    1c66:	a9 e5       	ldi	r26, 0x59	; 89
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	e9 e5       	ldi	r30, 0x59	; 89
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	80 81       	ld	r24, Z
    1c70:	8e 7f       	andi	r24, 0xFE	; 254
    1c72:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE0);									/* Disable Timer0 Compare Interrupt */
    1c74:	a9 e5       	ldi	r26, 0x59	; 89
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e9 e5       	ldi	r30, 0x59	; 89
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8d 7f       	andi	r24, 0xFD	; 253
    1c80:	8c 93       	st	X, r24
	timer_finish++;
    1c82:	80 91 88 00 	lds	r24, 0x0088
    1c86:	8f 5f       	subi	r24, 0xFF	; 255
    1c88:	80 93 88 00 	sts	0x0088, r24
}
    1c8c:	cf 91       	pop	r28
    1c8e:	df 91       	pop	r29
    1c90:	08 95       	ret

00001c92 <Timer1_DeInit>:

void Timer1_DeInit(void)
{
    1c92:	df 93       	push	r29
    1c94:	cf 93       	push	r28
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE1);									/* Disable Timer1 Overflow Interrupt */
    1c9a:	a9 e5       	ldi	r26, 0x59	; 89
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e9 e5       	ldi	r30, 0x59	; 89
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8b 7f       	andi	r24, 0xFB	; 251
    1ca6:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1A);									/* Disable Timer1 CompareA Interrupt */
    1ca8:	a9 e5       	ldi	r26, 0x59	; 89
    1caa:	b0 e0       	ldi	r27, 0x00	; 0
    1cac:	e9 e5       	ldi	r30, 0x59	; 89
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	80 81       	ld	r24, Z
    1cb2:	8f 7e       	andi	r24, 0xEF	; 239
    1cb4:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE1B);									/* Disable Timer1 CompareB Interrupt */
    1cb6:	a9 e5       	ldi	r26, 0x59	; 89
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	e9 e5       	ldi	r30, 0x59	; 89
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	80 81       	ld	r24, Z
    1cc0:	87 7f       	andi	r24, 0xF7	; 247
    1cc2:	8c 93       	st	X, r24
	timer_finish++;
    1cc4:	80 91 88 00 	lds	r24, 0x0088
    1cc8:	8f 5f       	subi	r24, 0xFF	; 255
    1cca:	80 93 88 00 	sts	0x0088, r24
}
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret

00001cd4 <Timer2_DeInit>:

void Timer2_DeInit(void)
{
    1cd4:	df 93       	push	r29
    1cd6:	cf 93       	push	r28
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK, TOIE2);									/* Disable Timer2 Overflow Interrupt */
    1cdc:	a9 e5       	ldi	r26, 0x59	; 89
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	e9 e5       	ldi	r30, 0x59	; 89
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 7b       	andi	r24, 0xBF	; 191
    1ce8:	8c 93       	st	X, r24
	CLEAR_BIT(TIMSK, OCIE2);									/* Disable Timer2 CompareA Interrupt */
    1cea:	a9 e5       	ldi	r26, 0x59	; 89
    1cec:	b0 e0       	ldi	r27, 0x00	; 0
    1cee:	e9 e5       	ldi	r30, 0x59	; 89
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	8f 77       	andi	r24, 0x7F	; 127
    1cf6:	8c 93       	st	X, r24
	timer_finish++;
    1cf8:	80 91 88 00 	lds	r24, 0x0088
    1cfc:	8f 5f       	subi	r24, 0xFF	; 255
    1cfe:	80 93 88 00 	sts	0x0088, r24
}
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <Timer0_setCallBack>:
 * Description :
 * Functions to set the Call Back function address for each timer
 */

void Timer0_setCallBack(void(*a_ptr)(void))
{
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <Timer0_setCallBack+0x6>
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
    1d12:	9a 83       	std	Y+2, r25	; 0x02
    1d14:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer0 = a_ptr;
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1a:	90 93 83 00 	sts	0x0083, r25
    1d1e:	80 93 82 00 	sts	0x0082, r24
}
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <Timer1_setCallBack+0x6>
    1d32:	cd b7       	in	r28, 0x3d	; 61
    1d34:	de b7       	in	r29, 0x3e	; 62
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer1 = a_ptr;
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	90 93 85 00 	sts	0x0085, r25
    1d42:	80 93 84 00 	sts	0x0084, r24
}
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	cf 91       	pop	r28
    1d4c:	df 91       	pop	r29
    1d4e:	08 95       	ret

00001d50 <Timer2_setCallBack>:

void Timer2_setCallBack(void(*a_ptr)(void))
{
    1d50:	df 93       	push	r29
    1d52:	cf 93       	push	r28
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <Timer2_setCallBack+0x6>
    1d56:	cd b7       	in	r28, 0x3d	; 61
    1d58:	de b7       	in	r29, 0x3e	; 62
    1d5a:	9a 83       	std	Y+2, r25	; 0x02
    1d5c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr_Timer2 = a_ptr;
    1d5e:	89 81       	ldd	r24, Y+1	; 0x01
    1d60:	9a 81       	ldd	r25, Y+2	; 0x02
    1d62:	90 93 87 00 	sts	0x0087, r25
    1d66:	80 93 86 00 	sts	0x0086, r24
}
    1d6a:	0f 90       	pop	r0
    1d6c:	0f 90       	pop	r0
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <DcMotor_Init>:
/*
 * Description :
 * Function responsible for DC-Motor Init-ialization
 */
void DcMotor_Init(void)
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	/* Set DC-Motor Pins as O/P */
	GPIO_setupPinDirection(PORTC_ID, PIN6_ID, PIN_OUTPUT);
    1d7c:	82 e0       	ldi	r24, 0x02	; 2
    1d7e:	66 e0       	ldi	r22, 0x06	; 6
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTC_ID, PIN7_ID, PIN_OUTPUT);
    1d86:	82 e0       	ldi	r24, 0x02	; 2
    1d88:	67 e0       	ldi	r22, 0x07	; 7
    1d8a:	41 e0       	ldi	r20, 0x01	; 1
    1d8c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <GPIO_setupPinDirection>

	/* Set Initial state for the motor to STOP state */
	GPIO_writePin(PORTC_ID, PIN6_ID, LOGIC_LOW);
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	66 e0       	ldi	r22, 0x06	; 6
    1d94:	40 e0       	ldi	r20, 0x00	; 0
    1d96:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>
	GPIO_writePin(PORTC_ID, PIN7_ID, LOGIC_LOW);
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	67 e0       	ldi	r22, 0x07	; 7
    1d9e:	40 e0       	ldi	r20, 0x00	; 0
    1da0:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <GPIO_writePin>

}
    1da4:	cf 91       	pop	r28
    1da6:	df 91       	pop	r29
    1da8:	08 95       	ret

00001daa <DcMotor_Rotate>:
/*
 * Description :
 * Function responsible for DC-Motor state
 */
void DcMotor_Rotate(DcMotor_State state)
{
    1daa:	df 93       	push	r29
    1dac:	cf 93       	push	r28
    1dae:	0f 92       	push	r0
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62
    1db4:	89 83       	std	Y+1, r24	; 0x01
	/* Set DC-Motor pins according to its state (CW, A-CW & STOP) */
	PORTC = (PORTC & 0X3F) | ((state & 0X03) << 6);
    1db6:	a5 e3       	ldi	r26, 0x35	; 53
    1db8:	b0 e0       	ldi	r27, 0x00	; 0
    1dba:	e5 e3       	ldi	r30, 0x35	; 53
    1dbc:	f0 e0       	ldi	r31, 0x00	; 0
    1dbe:	80 81       	ld	r24, Z
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	2f 73       	andi	r18, 0x3F	; 63
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	88 2f       	mov	r24, r24
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	00 24       	eor	r0, r0
    1dcc:	96 95       	lsr	r25
    1dce:	87 95       	ror	r24
    1dd0:	07 94       	ror	r0
    1dd2:	96 95       	lsr	r25
    1dd4:	87 95       	ror	r24
    1dd6:	07 94       	ror	r0
    1dd8:	98 2f       	mov	r25, r24
    1dda:	80 2d       	mov	r24, r0
    1ddc:	82 2b       	or	r24, r18
    1dde:	8c 93       	st	X, r24
}
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <GPIO_setupPinDirection+0x6>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <GPIO_setupPinDirection+0x8>
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	89 83       	std	Y+1, r24	; 0x01
    1df8:	6a 83       	std	Y+2, r22	; 0x02
    1dfa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	88 30       	cpi	r24, 0x08	; 8
    1e00:	08 f0       	brcs	.+2      	; 0x1e04 <GPIO_setupPinDirection+0x1c>
    1e02:	d5 c0       	rjmp	.+426    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	84 30       	cpi	r24, 0x04	; 4
    1e08:	08 f0       	brcs	.+2      	; 0x1e0c <GPIO_setupPinDirection+0x24>
    1e0a:	d1 c0       	rjmp	.+418    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	28 2f       	mov	r18, r24
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	3d 83       	std	Y+5, r19	; 0x05
    1e14:	2c 83       	std	Y+4, r18	; 0x04
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <GPIO_setupPinDirection+0x3a>
    1e20:	43 c0       	rjmp	.+134    	; 0x1ea8 <GPIO_setupPinDirection+0xc0>
    1e22:	2c 81       	ldd	r18, Y+4	; 0x04
    1e24:	3d 81       	ldd	r19, Y+5	; 0x05
    1e26:	22 30       	cpi	r18, 0x02	; 2
    1e28:	31 05       	cpc	r19, r1
    1e2a:	2c f4       	brge	.+10     	; 0x1e36 <GPIO_setupPinDirection+0x4e>
    1e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e30:	00 97       	sbiw	r24, 0x00	; 0
    1e32:	71 f0       	breq	.+28     	; 0x1e50 <GPIO_setupPinDirection+0x68>
    1e34:	bc c0       	rjmp	.+376    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
    1e36:	2c 81       	ldd	r18, Y+4	; 0x04
    1e38:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3a:	22 30       	cpi	r18, 0x02	; 2
    1e3c:	31 05       	cpc	r19, r1
    1e3e:	09 f4       	brne	.+2      	; 0x1e42 <GPIO_setupPinDirection+0x5a>
    1e40:	5f c0       	rjmp	.+190    	; 0x1f00 <GPIO_setupPinDirection+0x118>
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	9d 81       	ldd	r25, Y+5	; 0x05
    1e46:	83 30       	cpi	r24, 0x03	; 3
    1e48:	91 05       	cpc	r25, r1
    1e4a:	09 f4       	brne	.+2      	; 0x1e4e <GPIO_setupPinDirection+0x66>
    1e4c:	85 c0       	rjmp	.+266    	; 0x1f58 <GPIO_setupPinDirection+0x170>
    1e4e:	af c0       	rjmp	.+350    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	81 30       	cpi	r24, 0x01	; 1
    1e54:	a1 f4       	brne	.+40     	; 0x1e7e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e56:	aa e3       	ldi	r26, 0x3A	; 58
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	ea e3       	ldi	r30, 0x3A	; 58
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 2e       	mov	r0, r18
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <GPIO_setupPinDirection+0x8c>
    1e70:	88 0f       	add	r24, r24
    1e72:	99 1f       	adc	r25, r25
    1e74:	0a 94       	dec	r0
    1e76:	e2 f7       	brpl	.-8      	; 0x1e70 <GPIO_setupPinDirection+0x88>
    1e78:	84 2b       	or	r24, r20
    1e7a:	8c 93       	st	X, r24
    1e7c:	98 c0       	rjmp	.+304    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e7e:	aa e3       	ldi	r26, 0x3A	; 58
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	ea e3       	ldi	r30, 0x3A	; 58
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 81       	ld	r24, Z
    1e88:	48 2f       	mov	r20, r24
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	28 2f       	mov	r18, r24
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	02 2e       	mov	r0, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <GPIO_setupPinDirection+0xb4>
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	0a 94       	dec	r0
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <GPIO_setupPinDirection+0xb0>
    1ea0:	80 95       	com	r24
    1ea2:	84 23       	and	r24, r20
    1ea4:	8c 93       	st	X, r24
    1ea6:	83 c0       	rjmp	.+262    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	81 30       	cpi	r24, 0x01	; 1
    1eac:	a1 f4       	brne	.+40     	; 0x1ed6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1eae:	a7 e3       	ldi	r26, 0x37	; 55
    1eb0:	b0 e0       	ldi	r27, 0x00	; 0
    1eb2:	e7 e3       	ldi	r30, 0x37	; 55
    1eb4:	f0 e0       	ldi	r31, 0x00	; 0
    1eb6:	80 81       	ld	r24, Z
    1eb8:	48 2f       	mov	r20, r24
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	28 2f       	mov	r18, r24
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	81 e0       	ldi	r24, 0x01	; 1
    1ec2:	90 e0       	ldi	r25, 0x00	; 0
    1ec4:	02 2e       	mov	r0, r18
    1ec6:	02 c0       	rjmp	.+4      	; 0x1ecc <GPIO_setupPinDirection+0xe4>
    1ec8:	88 0f       	add	r24, r24
    1eca:	99 1f       	adc	r25, r25
    1ecc:	0a 94       	dec	r0
    1ece:	e2 f7       	brpl	.-8      	; 0x1ec8 <GPIO_setupPinDirection+0xe0>
    1ed0:	84 2b       	or	r24, r20
    1ed2:	8c 93       	st	X, r24
    1ed4:	6c c0       	rjmp	.+216    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ed6:	a7 e3       	ldi	r26, 0x37	; 55
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e7 e3       	ldi	r30, 0x37	; 55
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 81       	ld	r24, Z
    1ee0:	48 2f       	mov	r20, r24
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	28 2f       	mov	r18, r24
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	02 2e       	mov	r0, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <GPIO_setupPinDirection+0x10c>
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	0a 94       	dec	r0
    1ef6:	e2 f7       	brpl	.-8      	; 0x1ef0 <GPIO_setupPinDirection+0x108>
    1ef8:	80 95       	com	r24
    1efa:	84 23       	and	r24, r20
    1efc:	8c 93       	st	X, r24
    1efe:	57 c0       	rjmp	.+174    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	a1 f4       	brne	.+40     	; 0x1f2e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f06:	a4 e3       	ldi	r26, 0x34	; 52
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e4 e3       	ldi	r30, 0x34	; 52
    1f0c:	f0 e0       	ldi	r31, 0x00	; 0
    1f0e:	80 81       	ld	r24, Z
    1f10:	48 2f       	mov	r20, r24
    1f12:	8a 81       	ldd	r24, Y+2	; 0x02
    1f14:	28 2f       	mov	r18, r24
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	02 2e       	mov	r0, r18
    1f1e:	02 c0       	rjmp	.+4      	; 0x1f24 <GPIO_setupPinDirection+0x13c>
    1f20:	88 0f       	add	r24, r24
    1f22:	99 1f       	adc	r25, r25
    1f24:	0a 94       	dec	r0
    1f26:	e2 f7       	brpl	.-8      	; 0x1f20 <GPIO_setupPinDirection+0x138>
    1f28:	84 2b       	or	r24, r20
    1f2a:	8c 93       	st	X, r24
    1f2c:	40 c0       	rjmp	.+128    	; 0x1fae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f2e:	a4 e3       	ldi	r26, 0x34	; 52
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e4 e3       	ldi	r30, 0x34	; 52
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	48 2f       	mov	r20, r24
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	02 2e       	mov	r0, r18
    1f46:	02 c0       	rjmp	.+4      	; 0x1f4c <GPIO_setupPinDirection+0x164>
    1f48:	88 0f       	add	r24, r24
    1f4a:	99 1f       	adc	r25, r25
    1f4c:	0a 94       	dec	r0
    1f4e:	e2 f7       	brpl	.-8      	; 0x1f48 <GPIO_setupPinDirection+0x160>
    1f50:	80 95       	com	r24
    1f52:	84 23       	and	r24, r20
    1f54:	8c 93       	st	X, r24
    1f56:	2b c0       	rjmp	.+86     	; 0x1fae <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	a1 f4       	brne	.+40     	; 0x1f86 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1f5e:	a1 e3       	ldi	r26, 0x31	; 49
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e1 e3       	ldi	r30, 0x31	; 49
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 81       	ld	r24, Z
    1f68:	48 2f       	mov	r20, r24
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	28 2f       	mov	r18, r24
    1f6e:	30 e0       	ldi	r19, 0x00	; 0
    1f70:	81 e0       	ldi	r24, 0x01	; 1
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	02 2e       	mov	r0, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <GPIO_setupPinDirection+0x194>
    1f78:	88 0f       	add	r24, r24
    1f7a:	99 1f       	adc	r25, r25
    1f7c:	0a 94       	dec	r0
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <GPIO_setupPinDirection+0x190>
    1f80:	84 2b       	or	r24, r20
    1f82:	8c 93       	st	X, r24
    1f84:	14 c0       	rjmp	.+40     	; 0x1fae <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f86:	a1 e3       	ldi	r26, 0x31	; 49
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e1 e3       	ldi	r30, 0x31	; 49
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	28 2f       	mov	r18, r24
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	81 e0       	ldi	r24, 0x01	; 1
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	02 2e       	mov	r0, r18
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <GPIO_setupPinDirection+0x1bc>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	0a 94       	dec	r0
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <GPIO_setupPinDirection+0x1b8>
    1fa8:	80 95       	com	r24
    1faa:	84 23       	and	r24, r20
    1fac:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	00 d0       	rcall	.+0      	; 0x1fc4 <GPIO_writePin+0x6>
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <GPIO_writePin+0x8>
    1fc6:	0f 92       	push	r0
    1fc8:	cd b7       	in	r28, 0x3d	; 61
    1fca:	de b7       	in	r29, 0x3e	; 62
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	6a 83       	std	Y+2, r22	; 0x02
    1fd0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd4:	88 30       	cpi	r24, 0x08	; 8
    1fd6:	08 f0       	brcs	.+2      	; 0x1fda <GPIO_writePin+0x1c>
    1fd8:	d5 c0       	rjmp	.+426    	; 0x2184 <GPIO_writePin+0x1c6>
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	84 30       	cpi	r24, 0x04	; 4
    1fde:	08 f0       	brcs	.+2      	; 0x1fe2 <GPIO_writePin+0x24>
    1fe0:	d1 c0       	rjmp	.+418    	; 0x2184 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	3d 83       	std	Y+5, r19	; 0x05
    1fea:	2c 83       	std	Y+4, r18	; 0x04
    1fec:	8c 81       	ldd	r24, Y+4	; 0x04
    1fee:	9d 81       	ldd	r25, Y+5	; 0x05
    1ff0:	81 30       	cpi	r24, 0x01	; 1
    1ff2:	91 05       	cpc	r25, r1
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <GPIO_writePin+0x3a>
    1ff6:	43 c0       	rjmp	.+134    	; 0x207e <GPIO_writePin+0xc0>
    1ff8:	2c 81       	ldd	r18, Y+4	; 0x04
    1ffa:	3d 81       	ldd	r19, Y+5	; 0x05
    1ffc:	22 30       	cpi	r18, 0x02	; 2
    1ffe:	31 05       	cpc	r19, r1
    2000:	2c f4       	brge	.+10     	; 0x200c <GPIO_writePin+0x4e>
    2002:	8c 81       	ldd	r24, Y+4	; 0x04
    2004:	9d 81       	ldd	r25, Y+5	; 0x05
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	71 f0       	breq	.+28     	; 0x2026 <GPIO_writePin+0x68>
    200a:	bc c0       	rjmp	.+376    	; 0x2184 <GPIO_writePin+0x1c6>
    200c:	2c 81       	ldd	r18, Y+4	; 0x04
    200e:	3d 81       	ldd	r19, Y+5	; 0x05
    2010:	22 30       	cpi	r18, 0x02	; 2
    2012:	31 05       	cpc	r19, r1
    2014:	09 f4       	brne	.+2      	; 0x2018 <GPIO_writePin+0x5a>
    2016:	5f c0       	rjmp	.+190    	; 0x20d6 <GPIO_writePin+0x118>
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	83 30       	cpi	r24, 0x03	; 3
    201e:	91 05       	cpc	r25, r1
    2020:	09 f4       	brne	.+2      	; 0x2024 <GPIO_writePin+0x66>
    2022:	85 c0       	rjmp	.+266    	; 0x212e <GPIO_writePin+0x170>
    2024:	af c0       	rjmp	.+350    	; 0x2184 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2026:	8b 81       	ldd	r24, Y+3	; 0x03
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	a1 f4       	brne	.+40     	; 0x2054 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    202c:	ab e3       	ldi	r26, 0x3B	; 59
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	eb e3       	ldi	r30, 0x3B	; 59
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	48 2f       	mov	r20, r24
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	28 2f       	mov	r18, r24
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <GPIO_writePin+0x8c>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <GPIO_writePin+0x88>
    204e:	84 2b       	or	r24, r20
    2050:	8c 93       	st	X, r24
    2052:	98 c0       	rjmp	.+304    	; 0x2184 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2054:	ab e3       	ldi	r26, 0x3B	; 59
    2056:	b0 e0       	ldi	r27, 0x00	; 0
    2058:	eb e3       	ldi	r30, 0x3B	; 59
    205a:	f0 e0       	ldi	r31, 0x00	; 0
    205c:	80 81       	ld	r24, Z
    205e:	48 2f       	mov	r20, r24
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	28 2f       	mov	r18, r24
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	02 2e       	mov	r0, r18
    206c:	02 c0       	rjmp	.+4      	; 0x2072 <GPIO_writePin+0xb4>
    206e:	88 0f       	add	r24, r24
    2070:	99 1f       	adc	r25, r25
    2072:	0a 94       	dec	r0
    2074:	e2 f7       	brpl	.-8      	; 0x206e <GPIO_writePin+0xb0>
    2076:	80 95       	com	r24
    2078:	84 23       	and	r24, r20
    207a:	8c 93       	st	X, r24
    207c:	83 c0       	rjmp	.+262    	; 0x2184 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    207e:	8b 81       	ldd	r24, Y+3	; 0x03
    2080:	81 30       	cpi	r24, 0x01	; 1
    2082:	a1 f4       	brne	.+40     	; 0x20ac <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2084:	a8 e3       	ldi	r26, 0x38	; 56
    2086:	b0 e0       	ldi	r27, 0x00	; 0
    2088:	e8 e3       	ldi	r30, 0x38	; 56
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	80 81       	ld	r24, Z
    208e:	48 2f       	mov	r20, r24
    2090:	8a 81       	ldd	r24, Y+2	; 0x02
    2092:	28 2f       	mov	r18, r24
    2094:	30 e0       	ldi	r19, 0x00	; 0
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	02 2e       	mov	r0, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <GPIO_writePin+0xe4>
    209e:	88 0f       	add	r24, r24
    20a0:	99 1f       	adc	r25, r25
    20a2:	0a 94       	dec	r0
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <GPIO_writePin+0xe0>
    20a6:	84 2b       	or	r24, r20
    20a8:	8c 93       	st	X, r24
    20aa:	6c c0       	rjmp	.+216    	; 0x2184 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    20ac:	a8 e3       	ldi	r26, 0x38	; 56
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	e8 e3       	ldi	r30, 0x38	; 56
    20b2:	f0 e0       	ldi	r31, 0x00	; 0
    20b4:	80 81       	ld	r24, Z
    20b6:	48 2f       	mov	r20, r24
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	28 2f       	mov	r18, r24
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	02 2e       	mov	r0, r18
    20c4:	02 c0       	rjmp	.+4      	; 0x20ca <GPIO_writePin+0x10c>
    20c6:	88 0f       	add	r24, r24
    20c8:	99 1f       	adc	r25, r25
    20ca:	0a 94       	dec	r0
    20cc:	e2 f7       	brpl	.-8      	; 0x20c6 <GPIO_writePin+0x108>
    20ce:	80 95       	com	r24
    20d0:	84 23       	and	r24, r20
    20d2:	8c 93       	st	X, r24
    20d4:	57 c0       	rjmp	.+174    	; 0x2184 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	a1 f4       	brne	.+40     	; 0x2104 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    20dc:	a5 e3       	ldi	r26, 0x35	; 53
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e5 e3       	ldi	r30, 0x35	; 53
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	48 2f       	mov	r20, r24
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	28 2f       	mov	r18, r24
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	90 e0       	ldi	r25, 0x00	; 0
    20f2:	02 2e       	mov	r0, r18
    20f4:	02 c0       	rjmp	.+4      	; 0x20fa <GPIO_writePin+0x13c>
    20f6:	88 0f       	add	r24, r24
    20f8:	99 1f       	adc	r25, r25
    20fa:	0a 94       	dec	r0
    20fc:	e2 f7       	brpl	.-8      	; 0x20f6 <GPIO_writePin+0x138>
    20fe:	84 2b       	or	r24, r20
    2100:	8c 93       	st	X, r24
    2102:	40 c0       	rjmp	.+128    	; 0x2184 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2104:	a5 e3       	ldi	r26, 0x35	; 53
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e5 e3       	ldi	r30, 0x35	; 53
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	48 2f       	mov	r20, r24
    2110:	8a 81       	ldd	r24, Y+2	; 0x02
    2112:	28 2f       	mov	r18, r24
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	02 2e       	mov	r0, r18
    211c:	02 c0       	rjmp	.+4      	; 0x2122 <GPIO_writePin+0x164>
    211e:	88 0f       	add	r24, r24
    2120:	99 1f       	adc	r25, r25
    2122:	0a 94       	dec	r0
    2124:	e2 f7       	brpl	.-8      	; 0x211e <GPIO_writePin+0x160>
    2126:	80 95       	com	r24
    2128:	84 23       	and	r24, r20
    212a:	8c 93       	st	X, r24
    212c:	2b c0       	rjmp	.+86     	; 0x2184 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    212e:	8b 81       	ldd	r24, Y+3	; 0x03
    2130:	81 30       	cpi	r24, 0x01	; 1
    2132:	a1 f4       	brne	.+40     	; 0x215c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2134:	a2 e3       	ldi	r26, 0x32	; 50
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e2 e3       	ldi	r30, 0x32	; 50
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	48 2f       	mov	r20, r24
    2140:	8a 81       	ldd	r24, Y+2	; 0x02
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	02 2e       	mov	r0, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <GPIO_writePin+0x194>
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	0a 94       	dec	r0
    2154:	e2 f7       	brpl	.-8      	; 0x214e <GPIO_writePin+0x190>
    2156:	84 2b       	or	r24, r20
    2158:	8c 93       	st	X, r24
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    215c:	a2 e3       	ldi	r26, 0x32	; 50
    215e:	b0 e0       	ldi	r27, 0x00	; 0
    2160:	e2 e3       	ldi	r30, 0x32	; 50
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	48 2f       	mov	r20, r24
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	28 2f       	mov	r18, r24
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	02 2e       	mov	r0, r18
    2174:	02 c0       	rjmp	.+4      	; 0x217a <GPIO_writePin+0x1bc>
    2176:	88 0f       	add	r24, r24
    2178:	99 1f       	adc	r25, r25
    217a:	0a 94       	dec	r0
    217c:	e2 f7       	brpl	.-8      	; 0x2176 <GPIO_writePin+0x1b8>
    217e:	80 95       	com	r24
    2180:	84 23       	and	r24, r20
    2182:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	0f 90       	pop	r0
    218e:	cf 91       	pop	r28
    2190:	df 91       	pop	r29
    2192:	08 95       	ret

00002194 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2194:	df 93       	push	r29
    2196:	cf 93       	push	r28
    2198:	00 d0       	rcall	.+0      	; 0x219a <GPIO_readPin+0x6>
    219a:	00 d0       	rcall	.+0      	; 0x219c <GPIO_readPin+0x8>
    219c:	0f 92       	push	r0
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
    21a2:	8a 83       	std	Y+2, r24	; 0x02
    21a4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    21a6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	88 30       	cpi	r24, 0x08	; 8
    21ac:	08 f0       	brcs	.+2      	; 0x21b0 <GPIO_readPin+0x1c>
    21ae:	84 c0       	rjmp	.+264    	; 0x22b8 <GPIO_readPin+0x124>
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	84 30       	cpi	r24, 0x04	; 4
    21b4:	08 f0       	brcs	.+2      	; 0x21b8 <GPIO_readPin+0x24>
    21b6:	80 c0       	rjmp	.+256    	; 0x22b8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	3d 83       	std	Y+5, r19	; 0x05
    21c0:	2c 83       	std	Y+4, r18	; 0x04
    21c2:	4c 81       	ldd	r20, Y+4	; 0x04
    21c4:	5d 81       	ldd	r21, Y+5	; 0x05
    21c6:	41 30       	cpi	r20, 0x01	; 1
    21c8:	51 05       	cpc	r21, r1
    21ca:	79 f1       	breq	.+94     	; 0x222a <GPIO_readPin+0x96>
    21cc:	8c 81       	ldd	r24, Y+4	; 0x04
    21ce:	9d 81       	ldd	r25, Y+5	; 0x05
    21d0:	82 30       	cpi	r24, 0x02	; 2
    21d2:	91 05       	cpc	r25, r1
    21d4:	34 f4       	brge	.+12     	; 0x21e2 <GPIO_readPin+0x4e>
    21d6:	2c 81       	ldd	r18, Y+4	; 0x04
    21d8:	3d 81       	ldd	r19, Y+5	; 0x05
    21da:	21 15       	cp	r18, r1
    21dc:	31 05       	cpc	r19, r1
    21de:	69 f0       	breq	.+26     	; 0x21fa <GPIO_readPin+0x66>
    21e0:	6b c0       	rjmp	.+214    	; 0x22b8 <GPIO_readPin+0x124>
    21e2:	4c 81       	ldd	r20, Y+4	; 0x04
    21e4:	5d 81       	ldd	r21, Y+5	; 0x05
    21e6:	42 30       	cpi	r20, 0x02	; 2
    21e8:	51 05       	cpc	r21, r1
    21ea:	b9 f1       	breq	.+110    	; 0x225a <GPIO_readPin+0xc6>
    21ec:	8c 81       	ldd	r24, Y+4	; 0x04
    21ee:	9d 81       	ldd	r25, Y+5	; 0x05
    21f0:	83 30       	cpi	r24, 0x03	; 3
    21f2:	91 05       	cpc	r25, r1
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <GPIO_readPin+0x64>
    21f6:	49 c0       	rjmp	.+146    	; 0x228a <GPIO_readPin+0xf6>
    21f8:	5f c0       	rjmp	.+190    	; 0x22b8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    21fa:	e9 e3       	ldi	r30, 0x39	; 57
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	88 2f       	mov	r24, r24
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	a9 01       	movw	r20, r18
    220c:	02 c0       	rjmp	.+4      	; 0x2212 <GPIO_readPin+0x7e>
    220e:	55 95       	asr	r21
    2210:	47 95       	ror	r20
    2212:	8a 95       	dec	r24
    2214:	e2 f7       	brpl	.-8      	; 0x220e <GPIO_readPin+0x7a>
    2216:	ca 01       	movw	r24, r20
    2218:	81 70       	andi	r24, 0x01	; 1
    221a:	90 70       	andi	r25, 0x00	; 0
    221c:	88 23       	and	r24, r24
    221e:	19 f0       	breq	.+6      	; 0x2226 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	89 83       	std	Y+1, r24	; 0x01
    2224:	49 c0       	rjmp	.+146    	; 0x22b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2226:	19 82       	std	Y+1, r1	; 0x01
    2228:	47 c0       	rjmp	.+142    	; 0x22b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    222a:	e6 e3       	ldi	r30, 0x36	; 54
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	80 81       	ld	r24, Z
    2230:	28 2f       	mov	r18, r24
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a9 01       	movw	r20, r18
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <GPIO_readPin+0xae>
    223e:	55 95       	asr	r21
    2240:	47 95       	ror	r20
    2242:	8a 95       	dec	r24
    2244:	e2 f7       	brpl	.-8      	; 0x223e <GPIO_readPin+0xaa>
    2246:	ca 01       	movw	r24, r20
    2248:	81 70       	andi	r24, 0x01	; 1
    224a:	90 70       	andi	r25, 0x00	; 0
    224c:	88 23       	and	r24, r24
    224e:	19 f0       	breq	.+6      	; 0x2256 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	89 83       	std	Y+1, r24	; 0x01
    2254:	31 c0       	rjmp	.+98     	; 0x22b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2256:	19 82       	std	Y+1, r1	; 0x01
    2258:	2f c0       	rjmp	.+94     	; 0x22b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    225a:	e3 e3       	ldi	r30, 0x33	; 51
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <GPIO_readPin+0xde>
    226e:	55 95       	asr	r21
    2270:	47 95       	ror	r20
    2272:	8a 95       	dec	r24
    2274:	e2 f7       	brpl	.-8      	; 0x226e <GPIO_readPin+0xda>
    2276:	ca 01       	movw	r24, r20
    2278:	81 70       	andi	r24, 0x01	; 1
    227a:	90 70       	andi	r25, 0x00	; 0
    227c:	88 23       	and	r24, r24
    227e:	19 f0       	breq	.+6      	; 0x2286 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	19 c0       	rjmp	.+50     	; 0x22b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2286:	19 82       	std	Y+1, r1	; 0x01
    2288:	17 c0       	rjmp	.+46     	; 0x22b8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    228a:	e0 e3       	ldi	r30, 0x30	; 48
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a9 01       	movw	r20, r18
    229c:	02 c0       	rjmp	.+4      	; 0x22a2 <GPIO_readPin+0x10e>
    229e:	55 95       	asr	r21
    22a0:	47 95       	ror	r20
    22a2:	8a 95       	dec	r24
    22a4:	e2 f7       	brpl	.-8      	; 0x229e <GPIO_readPin+0x10a>
    22a6:	ca 01       	movw	r24, r20
    22a8:	81 70       	andi	r24, 0x01	; 1
    22aa:	90 70       	andi	r25, 0x00	; 0
    22ac:	88 23       	and	r24, r24
    22ae:	19 f0       	breq	.+6      	; 0x22b6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	89 83       	std	Y+1, r24	; 0x01
    22b4:	01 c0       	rjmp	.+2      	; 0x22b8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22b6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	0f 90       	pop	r0
    22c4:	cf 91       	pop	r28
    22c6:	df 91       	pop	r29
    22c8:	08 95       	ret

000022ca <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    22ca:	df 93       	push	r29
    22cc:	cf 93       	push	r28
    22ce:	00 d0       	rcall	.+0      	; 0x22d0 <GPIO_setupPortDirection+0x6>
    22d0:	00 d0       	rcall	.+0      	; 0x22d2 <GPIO_setupPortDirection+0x8>
    22d2:	cd b7       	in	r28, 0x3d	; 61
    22d4:	de b7       	in	r29, 0x3e	; 62
    22d6:	89 83       	std	Y+1, r24	; 0x01
    22d8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	84 30       	cpi	r24, 0x04	; 4
    22de:	90 f5       	brcc	.+100    	; 0x2344 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    22e0:	89 81       	ldd	r24, Y+1	; 0x01
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	3c 83       	std	Y+4, r19	; 0x04
    22e8:	2b 83       	std	Y+3, r18	; 0x03
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	81 30       	cpi	r24, 0x01	; 1
    22f0:	91 05       	cpc	r25, r1
    22f2:	d1 f0       	breq	.+52     	; 0x2328 <GPIO_setupPortDirection+0x5e>
    22f4:	2b 81       	ldd	r18, Y+3	; 0x03
    22f6:	3c 81       	ldd	r19, Y+4	; 0x04
    22f8:	22 30       	cpi	r18, 0x02	; 2
    22fa:	31 05       	cpc	r19, r1
    22fc:	2c f4       	brge	.+10     	; 0x2308 <GPIO_setupPortDirection+0x3e>
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	00 97       	sbiw	r24, 0x00	; 0
    2304:	61 f0       	breq	.+24     	; 0x231e <GPIO_setupPortDirection+0x54>
    2306:	1e c0       	rjmp	.+60     	; 0x2344 <GPIO_setupPortDirection+0x7a>
    2308:	2b 81       	ldd	r18, Y+3	; 0x03
    230a:	3c 81       	ldd	r19, Y+4	; 0x04
    230c:	22 30       	cpi	r18, 0x02	; 2
    230e:	31 05       	cpc	r19, r1
    2310:	81 f0       	breq	.+32     	; 0x2332 <GPIO_setupPortDirection+0x68>
    2312:	8b 81       	ldd	r24, Y+3	; 0x03
    2314:	9c 81       	ldd	r25, Y+4	; 0x04
    2316:	83 30       	cpi	r24, 0x03	; 3
    2318:	91 05       	cpc	r25, r1
    231a:	81 f0       	breq	.+32     	; 0x233c <GPIO_setupPortDirection+0x72>
    231c:	13 c0       	rjmp	.+38     	; 0x2344 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    231e:	ea e3       	ldi	r30, 0x3A	; 58
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	80 83       	st	Z, r24
    2326:	0e c0       	rjmp	.+28     	; 0x2344 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2328:	e7 e3       	ldi	r30, 0x37	; 55
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	8a 81       	ldd	r24, Y+2	; 0x02
    232e:	80 83       	st	Z, r24
    2330:	09 c0       	rjmp	.+18     	; 0x2344 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2332:	e4 e3       	ldi	r30, 0x34	; 52
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	80 83       	st	Z, r24
    233a:	04 c0       	rjmp	.+8      	; 0x2344 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    233c:	e1 e3       	ldi	r30, 0x31	; 49
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	8a 81       	ldd	r24, Y+2	; 0x02
    2342:	80 83       	st	Z, r24
			break;
		}
	}
}
    2344:	0f 90       	pop	r0
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	00 d0       	rcall	.+0      	; 0x2358 <GPIO_writePort+0x6>
    2358:	00 d0       	rcall	.+0      	; 0x235a <GPIO_writePort+0x8>
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	84 30       	cpi	r24, 0x04	; 4
    2366:	90 f5       	brcc	.+100    	; 0x23cc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	3c 83       	std	Y+4, r19	; 0x04
    2370:	2b 83       	std	Y+3, r18	; 0x03
    2372:	8b 81       	ldd	r24, Y+3	; 0x03
    2374:	9c 81       	ldd	r25, Y+4	; 0x04
    2376:	81 30       	cpi	r24, 0x01	; 1
    2378:	91 05       	cpc	r25, r1
    237a:	d1 f0       	breq	.+52     	; 0x23b0 <GPIO_writePort+0x5e>
    237c:	2b 81       	ldd	r18, Y+3	; 0x03
    237e:	3c 81       	ldd	r19, Y+4	; 0x04
    2380:	22 30       	cpi	r18, 0x02	; 2
    2382:	31 05       	cpc	r19, r1
    2384:	2c f4       	brge	.+10     	; 0x2390 <GPIO_writePort+0x3e>
    2386:	8b 81       	ldd	r24, Y+3	; 0x03
    2388:	9c 81       	ldd	r25, Y+4	; 0x04
    238a:	00 97       	sbiw	r24, 0x00	; 0
    238c:	61 f0       	breq	.+24     	; 0x23a6 <GPIO_writePort+0x54>
    238e:	1e c0       	rjmp	.+60     	; 0x23cc <GPIO_writePort+0x7a>
    2390:	2b 81       	ldd	r18, Y+3	; 0x03
    2392:	3c 81       	ldd	r19, Y+4	; 0x04
    2394:	22 30       	cpi	r18, 0x02	; 2
    2396:	31 05       	cpc	r19, r1
    2398:	81 f0       	breq	.+32     	; 0x23ba <GPIO_writePort+0x68>
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	83 30       	cpi	r24, 0x03	; 3
    23a0:	91 05       	cpc	r25, r1
    23a2:	81 f0       	breq	.+32     	; 0x23c4 <GPIO_writePort+0x72>
    23a4:	13 c0       	rjmp	.+38     	; 0x23cc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    23a6:	eb e3       	ldi	r30, 0x3B	; 59
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	8a 81       	ldd	r24, Y+2	; 0x02
    23ac:	80 83       	st	Z, r24
    23ae:	0e c0       	rjmp	.+28     	; 0x23cc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    23b0:	e8 e3       	ldi	r30, 0x38	; 56
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	80 83       	st	Z, r24
    23b8:	09 c0       	rjmp	.+18     	; 0x23cc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    23ba:	e5 e3       	ldi	r30, 0x35	; 53
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	80 83       	st	Z, r24
    23c2:	04 c0       	rjmp	.+8      	; 0x23cc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    23c4:	e2 e3       	ldi	r30, 0x32	; 50
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	80 83       	st	Z, r24
			break;
		}
	}
}
    23cc:	0f 90       	pop	r0
    23ce:	0f 90       	pop	r0
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	cf 91       	pop	r28
    23d6:	df 91       	pop	r29
    23d8:	08 95       	ret

000023da <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    23da:	df 93       	push	r29
    23dc:	cf 93       	push	r28
    23de:	00 d0       	rcall	.+0      	; 0x23e0 <GPIO_readPort+0x6>
    23e0:	00 d0       	rcall	.+0      	; 0x23e2 <GPIO_readPort+0x8>
    23e2:	cd b7       	in	r28, 0x3d	; 61
    23e4:	de b7       	in	r29, 0x3e	; 62
    23e6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    23e8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	84 30       	cpi	r24, 0x04	; 4
    23ee:	90 f5       	brcc	.+100    	; 0x2454 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    23f0:	8a 81       	ldd	r24, Y+2	; 0x02
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	3c 83       	std	Y+4, r19	; 0x04
    23f8:	2b 83       	std	Y+3, r18	; 0x03
    23fa:	8b 81       	ldd	r24, Y+3	; 0x03
    23fc:	9c 81       	ldd	r25, Y+4	; 0x04
    23fe:	81 30       	cpi	r24, 0x01	; 1
    2400:	91 05       	cpc	r25, r1
    2402:	d1 f0       	breq	.+52     	; 0x2438 <GPIO_readPort+0x5e>
    2404:	2b 81       	ldd	r18, Y+3	; 0x03
    2406:	3c 81       	ldd	r19, Y+4	; 0x04
    2408:	22 30       	cpi	r18, 0x02	; 2
    240a:	31 05       	cpc	r19, r1
    240c:	2c f4       	brge	.+10     	; 0x2418 <GPIO_readPort+0x3e>
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	00 97       	sbiw	r24, 0x00	; 0
    2414:	61 f0       	breq	.+24     	; 0x242e <GPIO_readPort+0x54>
    2416:	1e c0       	rjmp	.+60     	; 0x2454 <GPIO_readPort+0x7a>
    2418:	2b 81       	ldd	r18, Y+3	; 0x03
    241a:	3c 81       	ldd	r19, Y+4	; 0x04
    241c:	22 30       	cpi	r18, 0x02	; 2
    241e:	31 05       	cpc	r19, r1
    2420:	81 f0       	breq	.+32     	; 0x2442 <GPIO_readPort+0x68>
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	9c 81       	ldd	r25, Y+4	; 0x04
    2426:	83 30       	cpi	r24, 0x03	; 3
    2428:	91 05       	cpc	r25, r1
    242a:	81 f0       	breq	.+32     	; 0x244c <GPIO_readPort+0x72>
    242c:	13 c0       	rjmp	.+38     	; 0x2454 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    242e:	e9 e3       	ldi	r30, 0x39	; 57
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	89 83       	std	Y+1, r24	; 0x01
    2436:	0e c0       	rjmp	.+28     	; 0x2454 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2438:	e6 e3       	ldi	r30, 0x36	; 54
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	09 c0       	rjmp	.+18     	; 0x2454 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2442:	e3 e3       	ldi	r30, 0x33	; 51
    2444:	f0 e0       	ldi	r31, 0x00	; 0
    2446:	80 81       	ld	r24, Z
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	04 c0       	rjmp	.+8      	; 0x2454 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    244c:	e0 e3       	ldi	r30, 0x30	; 48
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	80 81       	ld	r24, Z
    2452:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2454:	89 81       	ldd	r24, Y+1	; 0x01
}
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * UART_Config_Ptr)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	00 d0       	rcall	.+0      	; 0x246a <UART_init+0x6>
    246a:	00 d0       	rcall	.+0      	; 0x246c <UART_init+0x8>
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	9c 83       	std	Y+4, r25	; 0x04
    2472:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2474:	1a 82       	std	Y+2, r1	; 0x02
    2476:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2478:	eb e2       	ldi	r30, 0x2B	; 43
    247a:	f0 e0       	ldi	r31, 0x00	; 0
    247c:	82 e0       	ldi	r24, 0x02	; 2
    247e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2480:	ea e2       	ldi	r30, 0x2A	; 42
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	88 e1       	ldi	r24, 0x18	; 24
    2486:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    2488:	e0 e4       	ldi	r30, 0x40	; 64
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	80 e8       	ldi	r24, 0x80	; 128
    248e:	80 83       	st	Z, r24
	/*
	 * Insert required number of bit data from structure
	 */
	UCSRC = (UCSRC & 0XF9) | ((UART_Config_Ptr->Bit_Data) << 1);
    2490:	a0 e4       	ldi	r26, 0x40	; 64
    2492:	b0 e0       	ldi	r27, 0x00	; 0
    2494:	e0 e4       	ldi	r30, 0x40	; 64
    2496:	f0 e0       	ldi	r31, 0x00	; 0
    2498:	80 81       	ld	r24, Z
    249a:	28 2f       	mov	r18, r24
    249c:	29 7f       	andi	r18, 0xF9	; 249
    249e:	eb 81       	ldd	r30, Y+3	; 0x03
    24a0:	fc 81       	ldd	r31, Y+4	; 0x04
    24a2:	80 81       	ld	r24, Z
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	82 2b       	or	r24, r18
    24ae:	8c 93       	st	X, r24
	/*
	 * Insert required number of stop bit from structure
	 */
	UCSRC = (UCSRC & 0XF7) | ((UART_Config_Ptr->ST_Bit) << 3);
    24b0:	a0 e4       	ldi	r26, 0x40	; 64
    24b2:	b0 e0       	ldi	r27, 0x00	; 0
    24b4:	e0 e4       	ldi	r30, 0x40	; 64
    24b6:	f0 e0       	ldi	r31, 0x00	; 0
    24b8:	80 81       	ld	r24, Z
    24ba:	28 2f       	mov	r18, r24
    24bc:	27 7f       	andi	r18, 0xF7	; 247
    24be:	eb 81       	ldd	r30, Y+3	; 0x03
    24c0:	fc 81       	ldd	r31, Y+4	; 0x04
    24c2:	83 81       	ldd	r24, Z+3	; 0x03
    24c4:	88 2f       	mov	r24, r24
    24c6:	90 e0       	ldi	r25, 0x00	; 0
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	88 0f       	add	r24, r24
    24ce:	99 1f       	adc	r25, r25
    24d0:	88 0f       	add	r24, r24
    24d2:	99 1f       	adc	r25, r25
    24d4:	82 2b       	or	r24, r18
    24d6:	8c 93       	st	X, r24
	/*
	 * Insert required bit to Enable(EVEN/ODD)/Disable Parity from structure
	 */
	UCSRC = (UCSRC & 0XCF) | ((UART_Config_Ptr->Parity_En_Dis) << 4);
    24d8:	a0 e4       	ldi	r26, 0x40	; 64
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e0 e4       	ldi	r30, 0x40	; 64
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	28 2f       	mov	r18, r24
    24e4:	2f 7c       	andi	r18, 0xCF	; 207
    24e6:	eb 81       	ldd	r30, Y+3	; 0x03
    24e8:	fc 81       	ldd	r31, Y+4	; 0x04
    24ea:	84 81       	ldd	r24, Z+4	; 0x04
    24ec:	88 2f       	mov	r24, r24
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	82 95       	swap	r24
    24f2:	92 95       	swap	r25
    24f4:	90 7f       	andi	r25, 0xF0	; 240
    24f6:	98 27       	eor	r25, r24
    24f8:	80 7f       	andi	r24, 0xF0	; 240
    24fa:	98 27       	eor	r25, r24
    24fc:	82 2b       	or	r24, r18
    24fe:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((UART_Config_Ptr->Baud_Rate) * 8UL))) - 1);
    2500:	eb 81       	ldd	r30, Y+3	; 0x03
    2502:	fc 81       	ldd	r31, Y+4	; 0x04
    2504:	81 81       	ldd	r24, Z+1	; 0x01
    2506:	92 81       	ldd	r25, Z+2	; 0x02
    2508:	cc 01       	movw	r24, r24
    250a:	a0 e0       	ldi	r26, 0x00	; 0
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	88 0f       	add	r24, r24
    2510:	99 1f       	adc	r25, r25
    2512:	aa 1f       	adc	r26, r26
    2514:	bb 1f       	adc	r27, r27
    2516:	88 0f       	add	r24, r24
    2518:	99 1f       	adc	r25, r25
    251a:	aa 1f       	adc	r26, r26
    251c:	bb 1f       	adc	r27, r27
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	aa 1f       	adc	r26, r26
    2524:	bb 1f       	adc	r27, r27
    2526:	9c 01       	movw	r18, r24
    2528:	ad 01       	movw	r20, r26
    252a:	80 e4       	ldi	r24, 0x40	; 64
    252c:	92 e4       	ldi	r25, 0x42	; 66
    252e:	af e0       	ldi	r26, 0x0F	; 15
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 46 13 	call	0x268c	; 0x268c <__udivmodsi4>
    253a:	da 01       	movw	r26, r20
    253c:	c9 01       	movw	r24, r18
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	9a 83       	std	Y+2, r25	; 0x02
    2542:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2544:	e0 e4       	ldi	r30, 0x40	; 64
    2546:	f0 e0       	ldi	r31, 0x00	; 0
    2548:	89 81       	ldd	r24, Y+1	; 0x01
    254a:	9a 81       	ldd	r25, Y+2	; 0x02
    254c:	89 2f       	mov	r24, r25
    254e:	99 27       	eor	r25, r25
    2550:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2552:	e9 e2       	ldi	r30, 0x29	; 41
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	80 83       	st	Z, r24
}
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	08 95       	ret

00002568 <UART_sendByte>:
/*
 * Description :
 * Function responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	0f 92       	push	r0
    256e:	cd b7       	in	r28, 0x3d	; 61
    2570:	de b7       	in	r29, 0x3e	; 62
    2572:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2574:	eb e2       	ldi	r30, 0x2B	; 43
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	80 81       	ld	r24, Z
    257a:	88 2f       	mov	r24, r24
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	80 72       	andi	r24, 0x20	; 32
    2580:	90 70       	andi	r25, 0x00	; 0
    2582:	00 97       	sbiw	r24, 0x00	; 0
    2584:	b9 f3       	breq	.-18     	; 0x2574 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2586:	ec e2       	ldi	r30, 0x2C	; 44
    2588:	f0 e0       	ldi	r31, 0x00	; 0
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	80 83       	st	Z, r24
}
    258e:	0f 90       	pop	r0
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	08 95       	ret

00002596 <UART_recieveByte>:
/*
 * Description :
 * Function responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2596:	df 93       	push	r29
    2598:	cf 93       	push	r28
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    259e:	eb e2       	ldi	r30, 0x2B	; 43
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	80 81       	ld	r24, Z
    25a4:	88 23       	and	r24, r24
    25a6:	dc f7       	brge	.-10     	; 0x259e <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    25a8:	ec e2       	ldi	r30, 0x2C	; 44
    25aa:	f0 e0       	ldi	r31, 0x00	; 0
    25ac:	80 81       	ld	r24, Z
}
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <UART_sendString>:
/*
 * Description :
 * Function responsible for send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <UART_sendString+0x6>
    25ba:	0f 92       	push	r0
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
    25c0:	9b 83       	std	Y+3, r25	; 0x03
    25c2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    25c4:	19 82       	std	Y+1, r1	; 0x01
    25c6:	0e c0       	rjmp	.+28     	; 0x25e4 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	28 2f       	mov	r18, r24
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	8a 81       	ldd	r24, Y+2	; 0x02
    25d0:	9b 81       	ldd	r25, Y+3	; 0x03
    25d2:	fc 01       	movw	r30, r24
    25d4:	e2 0f       	add	r30, r18
    25d6:	f3 1f       	adc	r31, r19
    25d8:	80 81       	ld	r24, Z
    25da:	0e 94 b4 12 	call	0x2568	; 0x2568 <UART_sendByte>
		i++;
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	8f 5f       	subi	r24, 0xFF	; 255
    25e2:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	fc 01       	movw	r30, r24
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	80 81       	ld	r24, Z
    25f6:	88 23       	and	r24, r24
    25f8:	39 f7       	brne	.-50     	; 0x25c8 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	0f 90       	pop	r0
    2600:	cf 91       	pop	r28
    2602:	df 91       	pop	r29
    2604:	08 95       	ret

00002606 <UART_receiveString>:
/*
 * Description :
 * Function responsible for receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
    260a:	df 93       	push	r29
    260c:	cf 93       	push	r28
    260e:	00 d0       	rcall	.+0      	; 0x2610 <UART_receiveString+0xa>
    2610:	0f 92       	push	r0
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	9b 83       	std	Y+3, r25	; 0x03
    2618:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    261a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	28 2f       	mov	r18, r24
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	8a 81       	ldd	r24, Y+2	; 0x02
    2624:	9b 81       	ldd	r25, Y+3	; 0x03
    2626:	8c 01       	movw	r16, r24
    2628:	02 0f       	add	r16, r18
    262a:	13 1f       	adc	r17, r19
    262c:	0e 94 cb 12 	call	0x2596	; 0x2596 <UART_recieveByte>
    2630:	f8 01       	movw	r30, r16
    2632:	80 83       	st	Z, r24
    2634:	0f c0       	rjmp	.+30     	; 0x2654 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	8f 5f       	subi	r24, 0xFF	; 255
    263a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	28 2f       	mov	r18, r24
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	9b 81       	ldd	r25, Y+3	; 0x03
    2646:	8c 01       	movw	r16, r24
    2648:	02 0f       	add	r16, r18
    264a:	13 1f       	adc	r17, r19
    264c:	0e 94 cb 12 	call	0x2596	; 0x2596 <UART_recieveByte>
    2650:	f8 01       	movw	r30, r16
    2652:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	28 2f       	mov	r18, r24
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	8a 81       	ldd	r24, Y+2	; 0x02
    265c:	9b 81       	ldd	r25, Y+3	; 0x03
    265e:	fc 01       	movw	r30, r24
    2660:	e2 0f       	add	r30, r18
    2662:	f3 1f       	adc	r31, r19
    2664:	80 81       	ld	r24, Z
    2666:	83 32       	cpi	r24, 0x23	; 35
    2668:	31 f7       	brne	.-52     	; 0x2636 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	8a 81       	ldd	r24, Y+2	; 0x02
    2672:	9b 81       	ldd	r25, Y+3	; 0x03
    2674:	fc 01       	movw	r30, r24
    2676:	e2 0f       	add	r30, r18
    2678:	f3 1f       	adc	r31, r19
    267a:	10 82       	st	Z, r1
}
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	cf 91       	pop	r28
    2684:	df 91       	pop	r29
    2686:	1f 91       	pop	r17
    2688:	0f 91       	pop	r16
    268a:	08 95       	ret

0000268c <__udivmodsi4>:
    268c:	a1 e2       	ldi	r26, 0x21	; 33
    268e:	1a 2e       	mov	r1, r26
    2690:	aa 1b       	sub	r26, r26
    2692:	bb 1b       	sub	r27, r27
    2694:	fd 01       	movw	r30, r26
    2696:	0d c0       	rjmp	.+26     	; 0x26b2 <__udivmodsi4_ep>

00002698 <__udivmodsi4_loop>:
    2698:	aa 1f       	adc	r26, r26
    269a:	bb 1f       	adc	r27, r27
    269c:	ee 1f       	adc	r30, r30
    269e:	ff 1f       	adc	r31, r31
    26a0:	a2 17       	cp	r26, r18
    26a2:	b3 07       	cpc	r27, r19
    26a4:	e4 07       	cpc	r30, r20
    26a6:	f5 07       	cpc	r31, r21
    26a8:	20 f0       	brcs	.+8      	; 0x26b2 <__udivmodsi4_ep>
    26aa:	a2 1b       	sub	r26, r18
    26ac:	b3 0b       	sbc	r27, r19
    26ae:	e4 0b       	sbc	r30, r20
    26b0:	f5 0b       	sbc	r31, r21

000026b2 <__udivmodsi4_ep>:
    26b2:	66 1f       	adc	r22, r22
    26b4:	77 1f       	adc	r23, r23
    26b6:	88 1f       	adc	r24, r24
    26b8:	99 1f       	adc	r25, r25
    26ba:	1a 94       	dec	r1
    26bc:	69 f7       	brne	.-38     	; 0x2698 <__udivmodsi4_loop>
    26be:	60 95       	com	r22
    26c0:	70 95       	com	r23
    26c2:	80 95       	com	r24
    26c4:	90 95       	com	r25
    26c6:	9b 01       	movw	r18, r22
    26c8:	ac 01       	movw	r20, r24
    26ca:	bd 01       	movw	r22, r26
    26cc:	cf 01       	movw	r24, r30
    26ce:	08 95       	ret

000026d0 <__prologue_saves__>:
    26d0:	2f 92       	push	r2
    26d2:	3f 92       	push	r3
    26d4:	4f 92       	push	r4
    26d6:	5f 92       	push	r5
    26d8:	6f 92       	push	r6
    26da:	7f 92       	push	r7
    26dc:	8f 92       	push	r8
    26de:	9f 92       	push	r9
    26e0:	af 92       	push	r10
    26e2:	bf 92       	push	r11
    26e4:	cf 92       	push	r12
    26e6:	df 92       	push	r13
    26e8:	ef 92       	push	r14
    26ea:	ff 92       	push	r15
    26ec:	0f 93       	push	r16
    26ee:	1f 93       	push	r17
    26f0:	cf 93       	push	r28
    26f2:	df 93       	push	r29
    26f4:	cd b7       	in	r28, 0x3d	; 61
    26f6:	de b7       	in	r29, 0x3e	; 62
    26f8:	ca 1b       	sub	r28, r26
    26fa:	db 0b       	sbc	r29, r27
    26fc:	0f b6       	in	r0, 0x3f	; 63
    26fe:	f8 94       	cli
    2700:	de bf       	out	0x3e, r29	; 62
    2702:	0f be       	out	0x3f, r0	; 63
    2704:	cd bf       	out	0x3d, r28	; 61
    2706:	09 94       	ijmp

00002708 <__epilogue_restores__>:
    2708:	2a 88       	ldd	r2, Y+18	; 0x12
    270a:	39 88       	ldd	r3, Y+17	; 0x11
    270c:	48 88       	ldd	r4, Y+16	; 0x10
    270e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2710:	6e 84       	ldd	r6, Y+14	; 0x0e
    2712:	7d 84       	ldd	r7, Y+13	; 0x0d
    2714:	8c 84       	ldd	r8, Y+12	; 0x0c
    2716:	9b 84       	ldd	r9, Y+11	; 0x0b
    2718:	aa 84       	ldd	r10, Y+10	; 0x0a
    271a:	b9 84       	ldd	r11, Y+9	; 0x09
    271c:	c8 84       	ldd	r12, Y+8	; 0x08
    271e:	df 80       	ldd	r13, Y+7	; 0x07
    2720:	ee 80       	ldd	r14, Y+6	; 0x06
    2722:	fd 80       	ldd	r15, Y+5	; 0x05
    2724:	0c 81       	ldd	r16, Y+4	; 0x04
    2726:	1b 81       	ldd	r17, Y+3	; 0x03
    2728:	aa 81       	ldd	r26, Y+2	; 0x02
    272a:	b9 81       	ldd	r27, Y+1	; 0x01
    272c:	ce 0f       	add	r28, r30
    272e:	d1 1d       	adc	r29, r1
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	ed 01       	movw	r28, r26
    273c:	08 95       	ret

0000273e <_exit>:
    273e:	f8 94       	cli

00002740 <__stop_program>:
    2740:	ff cf       	rjmp	.-2      	; 0x2740 <__stop_program>
